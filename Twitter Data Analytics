{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/praveenvs/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n",
      "[nltk_data] Downloading package punkt to /Users/praveenvs/nltk_data...\n",
      "[nltk_data]   Package punkt is already up-to-date!\n",
      "[nltk_data] Downloading package maxent_treebank_pos_tagger to\n",
      "[nltk_data]     /Users/praveenvs/nltk_data...\n",
      "[nltk_data]   Package maxent_treebank_pos_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package averaged_perceptron_tagger to\n",
      "[nltk_data]     /Users/praveenvs/nltk_data...\n",
      "[nltk_data]   Package averaged_perceptron_tagger is already up-to-\n",
      "[nltk_data]       date!\n",
      "[nltk_data] Downloading package wordnet to\n",
      "[nltk_data]     /Users/praveenvs/nltk_data...\n",
      "[nltk_data]   Package wordnet is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing required libraries\n",
    "import pandas as pd\n",
    "import json\n",
    "import csv\n",
    "import nltk\n",
    "from collections import Counter\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tag import pos_tag\n",
    "import re\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "from nltk.tokenize import TweetTokenizer\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.tokenize import RegexpTokenizer\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "# Download resources\n",
    "nltk.download('stopwords')\n",
    "nltk.download('punkt')\n",
    "nltk.download('maxent_treebank_pos_tagger')\n",
    "nltk.download('averaged_perceptron_tagger')\n",
    "nltk.download('wordnet')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### CANADIAN ELECTIONS CSV"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  DATA CLEANING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 638,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>negative</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>b\"@RosieBarton So instead of your suggestion, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b\"#AllWomanSpacewalk it's real!\\n@Space_Statio...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>negative</td>\n",
       "      <td>Economy</td>\n",
       "      <td>b\"#Brantford It's going to cost YOU $94 BILLIO...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b\"#Canada #CanadaElection2019 #CanadaVotes \\n#...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>negative</td>\n",
       "      <td>Economy</td>\n",
       "      <td>b\"#Canada #taxpayers are sick &amp;amp; tired of h...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>negative</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>b'You know he was doing a good enough job smea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>negative</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>b'You missed the comment. Deflecting the issue...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b'Your daily reminder:\\n@theJagmeetSingh endor...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>negative</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>b'Yup...not going to reopen the abortion debat...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b'Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p'</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sentiment                      negative_reason  \\\n",
       "0     negative  Women Reproductive right and Racism   \n",
       "1     positive                                  NaN   \n",
       "2     negative                              Economy   \n",
       "3     positive                                  NaN   \n",
       "4     negative                              Economy   \n",
       "...        ...                                  ...   \n",
       "2128  negative                              Scandal   \n",
       "2129  negative                              Scandal   \n",
       "2130  positive                                  NaN   \n",
       "2131  negative  Women Reproductive right and Racism   \n",
       "2132  positive                                  NaN   \n",
       "\n",
       "                                                   text  \n",
       "0     b\"@RosieBarton So instead of your suggestion, ...  \n",
       "1     b\"#AllWomanSpacewalk it's real!\\n@Space_Statio...  \n",
       "2     b\"#Brantford It's going to cost YOU $94 BILLIO...  \n",
       "3     b\"#Canada #CanadaElection2019 #CanadaVotes \\n#...  \n",
       "4     b\"#Canada #taxpayers are sick &amp; tired of h...  \n",
       "...                                                 ...  \n",
       "2128  b'You know he was doing a good enough job smea...  \n",
       "2129  b'You missed the comment. Deflecting the issue...  \n",
       "2130  b'Your daily reminder:\\n@theJagmeetSingh endor...  \n",
       "2131  b'Yup...not going to reopen the abortion debat...  \n",
       "2132     b'Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p'  \n",
       "\n",
       "[2133 rows x 3 columns]"
      ]
     },
     "execution_count": 638,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 639,
   "metadata": {},
   "outputs": [],
   "source": [
    "elections = elections.rename(columns = {\"text\": \"election_texts\"})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### DECODING all the columns of the election_texts "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 640,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gg(tweet1):\n",
    "    \n",
    "#     tweet1 = elections['election_texts'][0]\n",
    "\n",
    "    tweet1 = eval(tweet1).decode(\"utf-8\", \"ignore\")\n",
    "    \n",
    "    return tweet1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 641,
   "metadata": {},
   "outputs": [],
   "source": [
    "elections['decoded'] = elections['election_texts'].apply(lambda x: gg(x))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 642,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>election_texts</th>\n",
       "      <th>decoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>negative</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>b\"@RosieBarton So instead of your suggestion, ...</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b\"#AllWomanSpacewalk it's real!\\n@Space_Statio...</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>negative</td>\n",
       "      <td>Economy</td>\n",
       "      <td>b\"#Brantford It's going to cost YOU $94 BILLIO...</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b\"#Canada #CanadaElection2019 #CanadaVotes \\n#...</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>negative</td>\n",
       "      <td>Economy</td>\n",
       "      <td>b\"#Canada #taxpayers are sick &amp;amp; tired of h...</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>negative</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>b'You know he was doing a good enough job smea...</td>\n",
       "      <td>You know he was doing a good enough job smeari...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>negative</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>b'You missed the comment. Deflecting the issue...</td>\n",
       "      <td>You missed the comment. Deflecting the issue d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b'Your daily reminder:\\n@theJagmeetSingh endor...</td>\n",
       "      <td>Your daily reminder:\\n@theJagmeetSingh endorse...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>negative</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>b'Yup...not going to reopen the abortion debat...</td>\n",
       "      <td>Yup...not going to reopen the abortion debate....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>positive</td>\n",
       "      <td>NaN</td>\n",
       "      <td>b'Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p'</td>\n",
       "      <td>Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sentiment                      negative_reason  \\\n",
       "0     negative  Women Reproductive right and Racism   \n",
       "1     positive                                  NaN   \n",
       "2     negative                              Economy   \n",
       "3     positive                                  NaN   \n",
       "4     negative                              Economy   \n",
       "...        ...                                  ...   \n",
       "2128  negative                              Scandal   \n",
       "2129  negative                              Scandal   \n",
       "2130  positive                                  NaN   \n",
       "2131  negative  Women Reproductive right and Racism   \n",
       "2132  positive                                  NaN   \n",
       "\n",
       "                                         election_texts  \\\n",
       "0     b\"@RosieBarton So instead of your suggestion, ...   \n",
       "1     b\"#AllWomanSpacewalk it's real!\\n@Space_Statio...   \n",
       "2     b\"#Brantford It's going to cost YOU $94 BILLIO...   \n",
       "3     b\"#Canada #CanadaElection2019 #CanadaVotes \\n#...   \n",
       "4     b\"#Canada #taxpayers are sick &amp; tired of h...   \n",
       "...                                                 ...   \n",
       "2128  b'You know he was doing a good enough job smea...   \n",
       "2129  b'You missed the comment. Deflecting the issue...   \n",
       "2130  b'Your daily reminder:\\n@theJagmeetSingh endor...   \n",
       "2131  b'Yup...not going to reopen the abortion debat...   \n",
       "2132     b'Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p'   \n",
       "\n",
       "                                                decoded  \n",
       "0     @RosieBarton So instead of your suggestion, ho...  \n",
       "1     #AllWomanSpacewalk it's real!\\n@Space_Station ...  \n",
       "2     #Brantford It's going to cost YOU $94 BILLION ...  \n",
       "3     #Canada #CanadaElection2019 #CanadaVotes \\n#el...  \n",
       "4     #Canada #taxpayers are sick &amp; tired of hav...  \n",
       "...                                                 ...  \n",
       "2128  You know he was doing a good enough job smeari...  \n",
       "2129  You missed the comment. Deflecting the issue d...  \n",
       "2130  Your daily reminder:\\n@theJagmeetSingh endorse...  \n",
       "2131  Yup...not going to reopen the abortion debate....  \n",
       "2132        Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p  \n",
       "\n",
       "[2133 rows x 4 columns]"
      ]
     },
     "execution_count": 642,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elections"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 643,
   "metadata": {},
   "outputs": [],
   "source": [
    "decoded_df = elections[['decoded']]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 644,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 645,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using Python builtin split() and len() function\n",
    "# Split returns a list of words delimited by sequences of whitespace (including tabs, newlines, etc, like re's \\s) \n",
    "decoded_df.loc[:,'word_count']  = elections['decoded'].apply(lambda x: len(str(x).split())).copy()\n",
    "# Using NLTK word tokenizer and len function. Splits all punctuation excluding periods \n",
    "decoded_df.loc[:,'word_count_nltk'] =  elections['decoded'].apply(lambda x: len(nltk.word_tokenize(str(x)))).copy()\n",
    "# Using NLTK twitter tokenizer and len function. Smarter with handles, urls and punctuation\n",
    "from nltk.tokenize import TweetTokenizer\n",
    "Tokenizer = TweetTokenizer()\n",
    "decoded_df.loc[:,'word_count_twitter_nltk'] =   elections['decoded'].apply(lambda x: len(Tokenizer.tokenize(str(x)))).copy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 646,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decoded</th>\n",
       "      <th>word_count</th>\n",
       "      <th>word_count_nltk</th>\n",
       "      <th>word_count_twitter_nltk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>44</td>\n",
       "      <td>58</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>10</td>\n",
       "      <td>21</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>19</td>\n",
       "      <td>29</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>43</td>\n",
       "      <td>61</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             decoded  word_count  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...          44   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...          10   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...          19   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...          10   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...          43   \n",
       "\n",
       "   word_count_nltk  word_count_twitter_nltk  \n",
       "0               58                       47  \n",
       "1               21                       11  \n",
       "2               29                       22  \n",
       "3               19                       12  \n",
       "4               61                       46  "
      ]
     },
     "execution_count": 646,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "decoded_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocessing of election texts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 647,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decoded</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             decoded\n",
       "0  @RosieBarton So instead of your suggestion, ho...\n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...\n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...\n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...\n",
       "4  #Canada #taxpayers are sick &amp; tired of hav..."
      ]
     },
     "execution_count": 647,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp=elections[['decoded']]\n",
    "election_pp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 648,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \n",
       "0  @rosiebarton so instead of your suggestion, ho...  \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...  \n",
       "2  #brantford it's going to cost you $94 billion ...  \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...  \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...  "
      ]
     },
     "execution_count": 648,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.loc[:,'lower_case_text'] = election_pp[\"decoded\"].apply(lambda x: x.lower()).copy()\n",
    "election_pp[['decoded','lower_case_text']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now all the texts are in lower cases"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now removing all URLS and Hashtags by using lambda functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 649,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \n",
       "0    so instead of your suggestion, how about we ...  \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...  \n",
       "2   brantford it's going to cost you $94 billion ...  \n",
       "3   canada  canadaelection2019  canadavotes \\n el...  \n",
       "4   canada  taxpayers are sick &amp; tired of hav...  "
      ]
     },
     "execution_count": 649,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.loc[:,'without any urls and hashtags'] = election_pp[\"lower_case_text\"].apply(lambda x:re.sub('(@[\\w]+)|(^rt\\s+)|(http[s]:\\/\\/[\\w\\.-\\/]+[\\s]*)|(#)',' ',x))\n",
    "\n",
    "election_pp[['lower_case_text','without any urls and hashtags']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing Punctuations and special characters\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 650,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \n",
       "0   so instead of your suggestion how about we ag...  \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...  \n",
       "2   brantford it s going to cost you 94 billion f...  \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...  \n",
       "4   canada taxpayers are sick amp tired of having...  "
      ]
     },
     "execution_count": 650,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using the re.sub to remove all special,characters,tags,numbers\n",
    "election_pp.loc[:,'without any urls and hashtags and puncs']=election_pp['without any urls and hashtags'].apply(lambda x:re.sub('([^\\w]+)',' ',x))\n",
    "election_pp[['without any urls and hashtags','without any urls and hashtags and puncs']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing all stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 651,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \n",
       "0  instead suggestion agree canadian women trust ...  \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...  \n",
       "2  brantford going cost 94 billion next 4 years a...  \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...  \n",
       "4  canada taxpayers sick amp tired hard earned do...  "
      ]
     },
     "execution_count": 651,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stop_words=stopwords.words(\"english\")\n",
    "\n",
    "election_pp.loc[:,'without any urls,hashtags,puncs and stopwords'] = election_pp['without any urls and hashtags and puncs'].apply(lambda x: str(\" \".join(x for x in x.split() if x not in stop_words)))\n",
    "election_pp[['without any urls and hashtags and puncs','without any urls,hashtags,puncs and stopwords']].head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 652,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>daily reminder endorses strategic voting elxn4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          without any urls,hashtags,puncs and stopwords\n",
       "0     instead suggestion agree canadian women trust ...\n",
       "1     allwomanspacewalk real etobicokenorth cityofto...\n",
       "2     brantford going cost 94 billion next 4 years a...\n",
       "3     canada canadaelection2019 canadavotes elxn43 d...\n",
       "4     canada taxpayers sick amp tired hard earned do...\n",
       "...                                                 ...\n",
       "2128  know good enough job smearing campaign right c...\n",
       "2129  missed comment deflecting issue answer best re...\n",
       "2130  daily reminder endorses strategic voting elxn4...\n",
       "2131  yup going reopen abortion debate elxn43 scheer...\n",
       "2132                                    zing ndp elxn43\n",
       "\n",
       "[2133 rows x 1 columns]"
      ]
     },
     "execution_count": 652,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp[['without any urls,hashtags,puncs and stopwords']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####  NLTK TOKENIZATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 653,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \n",
       "0  [instead, suggestion, agree, canadian, women, ...  \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...  \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...  \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...  \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...  "
      ]
     },
     "execution_count": 653,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# # Using NLTK word tokenizer\n",
    "election_pp.loc[:,'NLTK  tokenization'] =  election_pp['without any urls,hashtags,puncs and stopwords'].apply(lambda x: nltk.word_tokenize(str(x))).copy()\n",
    "election_pp[['without any urls,hashtags,puncs and stopwords','NLTK  tokenization']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 654,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \n",
       "0  [instead, suggest, agre, canadian, women, trus...  \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...  \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...  \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...  \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...  "
      ]
     },
     "execution_count": 654,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#snow ball stemming\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "def stemmed(word_list):\n",
    "    stemmed_list = []\n",
    "    stem=SnowballStemmer('english')\n",
    "    for word in word_list:\n",
    "        stemmed_list.append(stem.stem(word))\n",
    "    return stemmed_list\n",
    "\n",
    "\n",
    "\n",
    "election_pp.loc[:,'Stemmed'] =  election_pp['NLTK  tokenization'].apply(lambda x: stemmed(x)).copy()\n",
    "election_pp[['NLTK  tokenization','Stemmed']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Lemmatized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                          Lemmatized  \n",
       "0  [instead, suggestion, agree, canadian, woman, ...  \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...  \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...  \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...  \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...  "
      ]
     },
     "execution_count": 655,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lemmatization\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "\n",
    "def lemmatized(word_list):\n",
    "    lemm=WordNetLemmatizer()\n",
    "    lemmatized_list = []\n",
    "    for word in word_list:\n",
    "        lemmatized_list.append(lemm.lemmatize(word))\n",
    "    return lemmatized_list\n",
    "\n",
    "\n",
    "\n",
    "election_pp.loc[:,'Lemmatized'] =  election_pp['NLTK  tokenization'].apply(lambda x: lemmatized(x)).copy()\n",
    "election_pp[['NLTK  tokenization','Lemmatized']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### We will be using lemmatized column as the final cleaned data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "metadata": {},
   "outputs": [],
   "source": [
    "electall = election_pp['Lemmatized'].apply(lambda x:  ' '.join(x))\n",
    "\n",
    "electall1 = electall.to_frame()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_text_elections</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>daily reminder endorses strategic voting elxn4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                   clean_text_elections\n",
       "0     instead suggestion agree canadian woman trust ...\n",
       "1     allwomanspacewalk real etobicokenorth cityofto...\n",
       "2     brantford going cost 94 billion next 4 year as...\n",
       "3     canada canadaelection2019 canadavotes elxn43 d...\n",
       "4     canada taxpayer sick amp tired hard earned don...\n",
       "...                                                 ...\n",
       "2128  know good enough job smearing campaign right c...\n",
       "2129  missed comment deflecting issue answer best re...\n",
       "2130  daily reminder endorses strategic voting elxn4...\n",
       "2131  yup going reopen abortion debate elxn43 scheer...\n",
       "2132                                    zing ndp elxn43\n",
       "\n",
       "[2133 rows x 1 columns]"
      ]
     },
     "execution_count": 657,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "electall1 = electall1.rename(columns={\"Lemmatized\": \"clean_text_elections\"}) \n",
    "\n",
    "electall1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "metadata": {},
   "outputs": [],
   "source": [
    "election_pp = pd.concat([election_pp,electall1], axis = 1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>You know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>[know, good, enough, job, smear, campaign, rig...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>You missed the comment. Deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment deflecting the issue do...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>[miss, comment, deflect, issu, answer, best, r...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>Your daily reminder:\\n@theJagmeetSingh endorse...</td>\n",
       "      <td>your daily reminder:\\n@thejagmeetsingh endorse...</td>\n",
       "      <td>your daily reminder:\\n  endorses strategic vot...</td>\n",
       "      <td>your daily reminder endorses strategic voting ...</td>\n",
       "      <td>daily reminder endorses strategic voting elxn4...</td>\n",
       "      <td>[daily, reminder, endorses, strategic, voting,...</td>\n",
       "      <td>[daili, remind, endors, strateg, vote, elxn43,...</td>\n",
       "      <td>[daily, reminder, endorses, strategic, voting,...</td>\n",
       "      <td>daily reminder endorses strategic voting elxn4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>Yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup not going to reopen the abortion debate el...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>[yup, go, reopen, abort, debat, elxn43, scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p</td>\n",
       "      <td>zing.\\n#ndp #elxn43 https://t.co/xo6qe4jv3p</td>\n",
       "      <td>zing.\\n ndp  elxn43</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "      <td>[zing, ndp, elxn43]</td>\n",
       "      <td>[zing, ndp, elxn43]</td>\n",
       "      <td>[zing, ndp, elxn43]</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                decoded  \\\n",
       "0     @RosieBarton So instead of your suggestion, ho...   \n",
       "1     #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2     #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3     #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4     #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "...                                                 ...   \n",
       "2128  You know he was doing a good enough job smeari...   \n",
       "2129  You missed the comment. Deflecting the issue d...   \n",
       "2130  Your daily reminder:\\n@theJagmeetSingh endorse...   \n",
       "2131  Yup...not going to reopen the abortion debate....   \n",
       "2132        Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p   \n",
       "\n",
       "                                        lower_case_text  \\\n",
       "0     @rosiebarton so instead of your suggestion, ho...   \n",
       "1     #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2     #brantford it's going to cost you $94 billion ...   \n",
       "3     #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4     #canada #taxpayers are sick &amp; tired of hav...   \n",
       "...                                                 ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2130  your daily reminder:\\n@thejagmeetsingh endorse...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "2132        zing.\\n#ndp #elxn43 https://t.co/xo6qe4jv3p   \n",
       "\n",
       "                          without any urls and hashtags  \\\n",
       "0       so instead of your suggestion, how about we ...   \n",
       "1      allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2      brantford it's going to cost you $94 billion ...   \n",
       "3      canada  canadaelection2019  canadavotes \\n el...   \n",
       "4      canada  taxpayers are sick &amp; tired of hav...   \n",
       "...                                                 ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2130  your daily reminder:\\n  endorses strategic vot...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "2132                              zing.\\n ndp  elxn43     \n",
       "\n",
       "                without any urls and hashtags and puncs  \\\n",
       "0      so instead of your suggestion how about we ag...   \n",
       "1      allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2      brantford it s going to cost you 94 billion f...   \n",
       "3      canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4      canada taxpayers are sick amp tired of having...   \n",
       "...                                                 ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment deflecting the issue do...   \n",
       "2130  your daily reminder endorses strategic voting ...   \n",
       "2131  yup not going to reopen the abortion debate el...   \n",
       "2132                                   zing ndp elxn43    \n",
       "\n",
       "          without any urls,hashtags,puncs and stopwords  \\\n",
       "0     instead suggestion agree canadian women trust ...   \n",
       "1     allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2     brantford going cost 94 billion next 4 years a...   \n",
       "3     canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4     canada taxpayers sick amp tired hard earned do...   \n",
       "...                                                 ...   \n",
       "2128  know good enough job smearing campaign right c...   \n",
       "2129  missed comment deflecting issue answer best re...   \n",
       "2130  daily reminder endorses strategic voting elxn4...   \n",
       "2131  yup going reopen abortion debate elxn43 scheer...   \n",
       "2132                                    zing ndp elxn43   \n",
       "\n",
       "                                     NLTK  tokenization  \\\n",
       "0     [instead, suggestion, agree, canadian, women, ...   \n",
       "1     [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3     [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4     [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "...                                                 ...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2130  [daily, reminder, endorses, strategic, voting,...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "2132                                [zing, ndp, elxn43]   \n",
       "\n",
       "                                                Stemmed  \\\n",
       "0     [instead, suggest, agre, canadian, women, trus...   \n",
       "1     [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2     [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3     [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4     [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "...                                                 ...   \n",
       "2128  [know, good, enough, job, smear, campaign, rig...   \n",
       "2129  [miss, comment, deflect, issu, answer, best, r...   \n",
       "2130  [daili, remind, endors, strateg, vote, elxn43,...   \n",
       "2131  [yup, go, reopen, abort, debat, elxn43, scheer...   \n",
       "2132                                [zing, ndp, elxn43]   \n",
       "\n",
       "                                             Lemmatized  \\\n",
       "0     [instead, suggestion, agree, canadian, woman, ...   \n",
       "1     [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3     [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4     [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "...                                                 ...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2130  [daily, reminder, endorses, strategic, voting,...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "2132                                [zing, ndp, elxn43]   \n",
       "\n",
       "                                   clean_text_elections  \n",
       "0     instead suggestion agree canadian woman trust ...  \n",
       "1     allwomanspacewalk real etobicokenorth cityofto...  \n",
       "2     brantford going cost 94 billion next 4 year as...  \n",
       "3     canada canadaelection2019 canadavotes elxn43 d...  \n",
       "4     canada taxpayer sick amp tired hard earned don...  \n",
       "...                                                 ...  \n",
       "2128  know good enough job smearing campaign right c...  \n",
       "2129  missed comment deflecting issue answer best re...  \n",
       "2130  daily reminder endorses strategic voting elxn4...  \n",
       "2131  yup going reopen abortion debate elxn43 scheer...  \n",
       "2132                                    zing ndp elxn43  \n",
       "\n",
       "[2133 rows x 9 columns]"
      ]
     },
     "execution_count": 659,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### GENERIC TWEETS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "df = pd.read_csv('generic_tweets.txt')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 661,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.rename(columns = {\"class\": \"Emotions_class\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Emotions_class</th>\n",
       "      <th>id</th>\n",
       "      <th>date</th>\n",
       "      <th>query</th>\n",
       "      <th>user</th>\n",
       "      <th>text</th>\n",
       "      <th>length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1467810369</td>\n",
       "      <td>Mon Apr 06 22:19:45 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>_TheSpecialOne_</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "      <td>115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1467810672</td>\n",
       "      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>scotthamilton</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1467810917</td>\n",
       "      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>mattycus</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1467811184</td>\n",
       "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>ElleCTF</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>1467811193</td>\n",
       "      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>Karoli</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199995</td>\n",
       "      <td>4</td>\n",
       "      <td>1693956088</td>\n",
       "      <td>Mon May 04 00:27:13 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>FelineBred</td>\n",
       "      <td>@jvdouglas  haha, no, the remark on maternity ...</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199996</td>\n",
       "      <td>4</td>\n",
       "      <td>1693956096</td>\n",
       "      <td>Mon May 04 00:27:14 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>softthistle</td>\n",
       "      <td>@altitis and to you!</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199997</td>\n",
       "      <td>4</td>\n",
       "      <td>1693956099</td>\n",
       "      <td>Mon May 04 00:27:14 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>elysion32</td>\n",
       "      <td>Okie doke!! Time for me to escape for the Nort...</td>\n",
       "      <td>106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199998</td>\n",
       "      <td>4</td>\n",
       "      <td>1693956134</td>\n",
       "      <td>Mon May 04 00:27:14 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>fancyjessy</td>\n",
       "      <td>finished the lessons, hooray!</td>\n",
       "      <td>30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199999</td>\n",
       "      <td>4</td>\n",
       "      <td>1693956160</td>\n",
       "      <td>Mon May 04 00:27:14 PDT 2009</td>\n",
       "      <td>NO_QUERY</td>\n",
       "      <td>noraezan</td>\n",
       "      <td>Some ppl are just fucking KP0. Cb ! Stop askin...</td>\n",
       "      <td>91</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200000 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Emotions_class          id                          date     query  \\\n",
       "0                    0  1467810369  Mon Apr 06 22:19:45 PDT 2009  NO_QUERY   \n",
       "1                    0  1467810672  Mon Apr 06 22:19:49 PDT 2009  NO_QUERY   \n",
       "2                    0  1467810917  Mon Apr 06 22:19:53 PDT 2009  NO_QUERY   \n",
       "3                    0  1467811184  Mon Apr 06 22:19:57 PDT 2009  NO_QUERY   \n",
       "4                    0  1467811193  Mon Apr 06 22:19:57 PDT 2009  NO_QUERY   \n",
       "...                ...         ...                           ...       ...   \n",
       "199995               4  1693956088  Mon May 04 00:27:13 PDT 2009  NO_QUERY   \n",
       "199996               4  1693956096  Mon May 04 00:27:14 PDT 2009  NO_QUERY   \n",
       "199997               4  1693956099  Mon May 04 00:27:14 PDT 2009  NO_QUERY   \n",
       "199998               4  1693956134  Mon May 04 00:27:14 PDT 2009  NO_QUERY   \n",
       "199999               4  1693956160  Mon May 04 00:27:14 PDT 2009  NO_QUERY   \n",
       "\n",
       "                   user                                               text  \\\n",
       "0       _TheSpecialOne_  @switchfoot http://twitpic.com/2y1zl - Awww, t...   \n",
       "1         scotthamilton  is upset that he can't update his Facebook by ...   \n",
       "2              mattycus  @Kenichan I dived many times for the ball. Man...   \n",
       "3               ElleCTF    my whole body feels itchy and like its on fire    \n",
       "4                Karoli  @nationwideclass no, it's not behaving at all....   \n",
       "...                 ...                                                ...   \n",
       "199995       FelineBred  @jvdouglas  haha, no, the remark on maternity ...   \n",
       "199996      softthistle                              @altitis and to you!    \n",
       "199997        elysion32  Okie doke!! Time for me to escape for the Nort...   \n",
       "199998       fancyjessy                     finished the lessons, hooray!    \n",
       "199999         noraezan  Some ppl are just fucking KP0. Cb ! Stop askin...   \n",
       "\n",
       "        length  \n",
       "0          115  \n",
       "1          111  \n",
       "2           89  \n",
       "3           47  \n",
       "4          111  \n",
       "...        ...  \n",
       "199995      73  \n",
       "199996      21  \n",
       "199997     106  \n",
       "199998      30  \n",
       "199999      91  \n",
       "\n",
       "[200000 rows x 7 columns]"
      ]
     },
     "execution_count": 662,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['length'] = df['text'].apply(len)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Not including other features and including only text data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199995</td>\n",
       "      <td>@jvdouglas  haha, no, the remark on maternity ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199996</td>\n",
       "      <td>@altitis and to you!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199997</td>\n",
       "      <td>Okie doke!! Time for me to escape for the Nort...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199998</td>\n",
       "      <td>finished the lessons, hooray!</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199999</td>\n",
       "      <td>Some ppl are just fucking KP0. Cb ! Stop askin...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                     text\n",
       "0       @switchfoot http://twitpic.com/2y1zl - Awww, t...\n",
       "1       is upset that he can't update his Facebook by ...\n",
       "2       @Kenichan I dived many times for the ball. Man...\n",
       "3         my whole body feels itchy and like its on fire \n",
       "4       @nationwideclass no, it's not behaving at all....\n",
       "...                                                   ...\n",
       "199995  @jvdouglas  haha, no, the remark on maternity ...\n",
       "199996                              @altitis and to you! \n",
       "199997  Okie doke!! Time for me to escape for the Nort...\n",
       "199998                     finished the lessons, hooray! \n",
       "199999  Some ppl are just fucking KP0. Cb ! Stop askin...\n",
       "\n",
       "[200000 rows x 1 columns]"
      ]
     },
     "execution_count": 663,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = df[['text']]\n",
    "df1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Using Python builtin split() and len() function\n",
    "# Split returns a list of words delimited by sequences of whitespace (including tabs, newlines, etc, like re's \\s) \n",
    "df1.loc[:,'word_count']  = df['text'].apply(lambda x: len(str(x).split())).copy()\n",
    "# Using NLTK word tokenizer and len function. Splits all punctuation excluding periods \n",
    "df1.loc[:,'word_count_nltk'] =  df['text'].apply(lambda x: len(nltk.word_tokenize(str(x)))).copy()\n",
    "# Using NLTK twitter tokenizer and len function. Smarter with handles, urls and punctuation\n",
    "from nltk.tokenize import TweetTokenizer\n",
    "Tokenizer = TweetTokenizer()\n",
    "df1.loc[:,'word_count_twitter_nltk'] =  df['text'].apply(lambda x: len(Tokenizer.tokenize(str(x)))).copy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>word_count</th>\n",
       "      <th>word_count_nltk</th>\n",
       "      <th>word_count_twitter_nltk</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "      <td>19</td>\n",
       "      <td>27</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>18</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>21</td>\n",
       "      <td>30</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  word_count  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - Awww, t...          19   \n",
       "1  is upset that he can't update his Facebook by ...          21   \n",
       "2  @Kenichan I dived many times for the ball. Man...          18   \n",
       "3    my whole body feels itchy and like its on fire           10   \n",
       "4  @nationwideclass no, it's not behaving at all....          21   \n",
       "\n",
       "   word_count_nltk  word_count_twitter_nltk  \n",
       "0               27                       22  \n",
       "1               25                       24  \n",
       "2               21                       20  \n",
       "3               10                       10  \n",
       "4               30                       26  "
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 666,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"@switchfoot http://twitpic.com/2y1zl - Awww , that's a bummer . You shoulda got David Carr of Third Day to do it . ;D\""
      ]
     },
     "execution_count": 666,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\" \".join(Tokenizer.tokenize(str(df1['text'][0])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### PREPROCESSING OF TEXTS "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Converting all \"texts\" to lower case by using lambda function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text\n",
       "0  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n",
       "1  is upset that he can't update his Facebook by ...\n",
       "2  @Kenichan I dived many times for the ball. Man...\n",
       "3    my whole body feels itchy and like its on fire \n",
       "4  @nationwideclass no, it's not behaving at all...."
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp=df[[\"text\"]]\n",
    "df_pp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 668,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>lower_case_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - awww, t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>@kenichan i dived many times for the ball. man...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - Awww, t...   \n",
       "1  is upset that he can't update his Facebook by ...   \n",
       "2  @Kenichan I dived many times for the ball. Man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     lower_case_text  \n",
       "0  @switchfoot http://twitpic.com/2y1zl - awww, t...  \n",
       "1  is upset that he can't update his facebook by ...  \n",
       "2  @kenichan i dived many times for the ball. man...  \n",
       "3    my whole body feels itchy and like its on fire   \n",
       "4  @nationwideclass no, it's not behaving at all....  "
      ]
     },
     "execution_count": 668,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp.loc[:,'lower_case_text'] = df_pp[\"text\"].apply(lambda x: x.lower()).copy()\n",
    "df_pp[['text','lower_case_text']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now we have converted all upper case text data to lower cases"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 669,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>starting with @</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - awww, t...</td>\n",
       "      <td>http://twitpic.com/2y1zl - awww, that's a bum...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@kenichan i dived many times for the ball. man...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     lower_case_text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - awww, t...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2  @kenichan i dived many times for the ball. man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     starting with @  \n",
       "0   http://twitpic.com/2y1zl - awww, that's a bum...  \n",
       "1  is upset that he can't update his facebook by ...  \n",
       "2   i dived many times for the ball. managed to s...  \n",
       "3    my whole body feels itchy and like its on fire   \n",
       "4   no, it's not behaving at all. i'm mad. why am...  "
      ]
     },
     "execution_count": 669,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing twitter handle which start with @\n",
    "df_pp.loc[:,'starting with @']= df_pp['lower_case_text'].apply(lambda x: re.sub(r'@[\\w]+',\"\",x))\n",
    "\n",
    "df_pp[['lower_case_text','starting with @']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing all URLS and Hashtags by using lambda functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>starting with @</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>http://twitpic.com/2y1zl - awww, that's a bum...</td>\n",
       "      <td>- awww, that's a bummer.  you shoulda got da...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                     starting with @  \\\n",
       "0   http://twitpic.com/2y1zl - awww, that's a bum...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "                       without any urls and hashtags  \n",
       "0    - awww, that's a bummer.  you shoulda got da...  \n",
       "1  is upset that he can't update his facebook by ...  \n",
       "2   i dived many times for the ball. managed to s...  \n",
       "3    my whole body feels itchy and like its on fire   \n",
       "4   no, it's not behaving at all. i'm mad. why am...  "
      ]
     },
     "execution_count": 670,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp.loc[:,'without any urls and hashtags'] = df_pp[\"starting with @\"].apply(lambda x:re.sub(r'http://[\\w]+.[\\w]+/[\\w]+',\"\",x))\n",
    "\n",
    "df_pp[['starting with @','without any urls and hashtags']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing Punctuations and special characters\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 671,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>- awww, that's a bummer.  you shoulda got da...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       without any urls and hashtags  \\\n",
       "0    - awww, that's a bummer.  you shoulda got da...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \n",
       "0     awww thats a bummer  you shoulda got david ...  \n",
       "1  is upset that he cant update his facebook by t...  \n",
       "2   i dived many times for the ball managed to sa...  \n",
       "3    my whole body feels itchy and like its on fire   \n",
       "4   no its not behaving at all im mad why am i he...  "
      ]
     },
     "execution_count": 671,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using the re.sub to remove all special,characters,tags,numbers\n",
    "df_pp.loc[:,'without any urls and hashtags and puncs']=df_pp['without any urls and hashtags'].apply(lambda x: re.sub(r'[^\\w\\s]',\"\",x))\n",
    "df_pp[['without any urls and hashtags','without any urls and hashtags and puncs']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Removing other symbols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls and hashtags and puncs and other symbols</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             without any urls and hashtags and puncs  \\\n",
       "0     awww thats a bummer  you shoulda got david ...   \n",
       "1  is upset that he cant update his facebook by t...   \n",
       "2   i dived many times for the ball managed to sa...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no its not behaving at all im mad why am i he...   \n",
       "\n",
       "  without any urls and hashtags and puncs and other symbols  \n",
       "0     awww thats a bummer  you shoulda got david ...         \n",
       "1  is upset that he cant update his facebook by t...         \n",
       "2   i dived many times for the ball managed to sa...         \n",
       "3    my whole body feels itchy and like its on fire          \n",
       "4   no its not behaving at all im mad why am i he...         "
      ]
     },
     "execution_count": 672,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#using the re.sub to remove all special,characters,tags,numbers\n",
    "df_pp.loc[:,'without any urls and hashtags and puncs and other symbols']=df_pp['without any urls and hashtags and puncs'].apply(lambda x: re.sub(r'-',\"\",x))\n",
    "df_pp[['without any urls and hashtags and puncs','without any urls and hashtags and puncs and other symbols']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing all stopwords"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls and hashtags and puncs and other symbols</th>\n",
       "      <th>without any urls,hashtags,puncs,other symbols and stopwords</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>dived many times ball managed save 50 rest go ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>whole body feels itchy like fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  without any urls and hashtags and puncs and other symbols  \\\n",
       "0     awww thats a bummer  you shoulda got david ...          \n",
       "1  is upset that he cant update his facebook by t...          \n",
       "2   i dived many times for the ball managed to sa...          \n",
       "3    my whole body feels itchy and like its on fire           \n",
       "4   no its not behaving at all im mad why am i he...          \n",
       "\n",
       "  without any urls,hashtags,puncs,other symbols and stopwords  \n",
       "0  awww thats bummer shoulda got david carr third...           \n",
       "1  upset cant update facebook texting might cry r...           \n",
       "2  dived many times ball managed save 50 rest go ...           \n",
       "3                   whole body feels itchy like fire           \n",
       "4                           behaving im mad cant see           "
      ]
     },
     "execution_count": 673,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stop_words=stopwords.words(\"english\")\n",
    "\n",
    "df_pp.loc[:,'without any urls,hashtags,puncs,other symbols and stopwords'] = df_pp['without any urls and hashtags and puncs and other symbols'].apply(lambda x: str(\" \".join(x for x in x.split() if x not in stop_words)))\n",
    "df_pp[['without any urls and hashtags and puncs and other symbols','without any urls,hashtags,puncs,other symbols and stopwords']].head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Correction of all spelling mistakes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # This takes less than 5 minutes to complete, may take longer \n",
    "# correct_spelling = []\n",
    "# for i in range(200000):\n",
    "#   correct_spelling.append(str(TextBlob(df_pp[\"without any urls,hashtags,puncs and stopwords\"].iloc[i]).correct()))\n",
    "\n",
    "# #spell_corrected=pd.DataFrame(l)  \n",
    "\n",
    "\n",
    "# df_pp.loc[:,\"without any urls,hashtags,puncs and stopwords with correct spelling \"]=correct_spelling\n",
    "# df_pp[['without any urls,hashtags,puncs and stopwords','without any urls,hashtags,puncs and stopwords with correct spelling']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Removing Rare words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ## Words are considered rare if count = 1 in all the texts\n",
    "\n",
    "# # Tokenizing each texts using split()\n",
    "\n",
    "\n",
    "# list_tokenized_texts = [ texts.split() for texts in df_pp['without any urls,hashtags,puncs and stopwords']]\n",
    "\n",
    "# # Concatenating all tokens in texts\n",
    "\n",
    "# all_tokenized_texts = []\n",
    "\n",
    "# for tokenized_texts in list_tokenized_texts:\n",
    "#     all_tokenized_texts = all_tokenized_texts + tokenized_texts\n",
    "    \n",
    "# # Getting token frequency in descending order\n",
    "\n",
    "    \n",
    "# df_all_tokenized_texts = pd.DataFrame(Counter(all_tokenized_texts).most_common(),\n",
    "#                              columns=['words', 'count'])\n",
    "# rare_words = df_all_tokenized_texts[df_all_tokenized_texts['count'] == 1]\n",
    "\n",
    "# #print(rare_words.words.tolist())\n",
    "\n",
    "# def rare_words_removal(words):\n",
    "#     words_without_rare = words\n",
    "#     for word in words.split():\n",
    "#         if word in rare_words.words.tolist():\n",
    "#             words_without_rare = words_without_rare.replace(word, '')\n",
    "#     return words_without_rare\n",
    "\n",
    "\n",
    "# df_pp.loc[:,'without any urls,hashtags,puncs,stopwords and rarewords'] =  df_pp['without any urls,hashtags,puncs and stopwords'].apply(lambda x: rare_words_removal(x)).copy()\n",
    "\n",
    "            \n",
    "    \n",
    "# df_pp[['without any urls,hashtags,puncs and stopwords','without any urls,hashtags,puncs,stopwords and rarewords']].head()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### NLTK  tokenization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>without any urls,hashtags,puncs,other symbols and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>dived many times ball managed save 50 rest go ...</td>\n",
       "      <td>[dived, many, times, ball, managed, save, 50, ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>whole body feels itchy like fire</td>\n",
       "      <td>[whole, body, feels, itchy, like, fire]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  without any urls,hashtags,puncs,other symbols and stopwords  \\\n",
       "0  awww thats bummer shoulda got david carr third...            \n",
       "1  upset cant update facebook texting might cry r...            \n",
       "2  dived many times ball managed save 50 rest go ...            \n",
       "3                   whole body feels itchy like fire            \n",
       "4                           behaving im mad cant see            \n",
       "\n",
       "                                  NLTK  tokenization  \n",
       "0  [awww, thats, bummer, shoulda, got, david, car...  \n",
       "1  [upset, cant, update, facebook, texting, might...  \n",
       "2  [dived, many, times, ball, managed, save, 50, ...  \n",
       "3            [whole, body, feels, itchy, like, fire]  \n",
       "4                     [behaving, im, mad, cant, see]  "
      ]
     },
     "execution_count": 676,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# # Using NLTK word tokenizer\n",
    "df_pp.loc[:,'NLTK  tokenization'] =  df_pp['without any urls,hashtags,puncs,other symbols and stopwords'].apply(lambda x: nltk.word_tokenize(str(x))).copy()\n",
    "df_pp[['without any urls,hashtags,puncs,other symbols and stopwords','NLTK  tokenization']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### STEMMING AND LEMMITIZATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>[awww, that, bummer, shoulda, got, david, carr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>[upset, cant, updat, facebook, text, might, cr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[dived, many, times, ball, managed, save, 50, ...</td>\n",
       "      <td>[dive, mani, time, ball, manag, save, 50, rest...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[whole, body, feels, itchy, like, fire]</td>\n",
       "      <td>[whole, bodi, feel, itchi, like, fire]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>[behav, im, mad, cant, see]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  NLTK  tokenization  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, times, ball, managed, save, 50, ...   \n",
       "3            [whole, body, feels, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                             Stemmed  \n",
       "0  [awww, that, bummer, shoulda, got, david, carr...  \n",
       "1  [upset, cant, updat, facebook, text, might, cr...  \n",
       "2  [dive, mani, time, ball, manag, save, 50, rest...  \n",
       "3             [whole, bodi, feel, itchi, like, fire]  \n",
       "4                        [behav, im, mad, cant, see]  "
      ]
     },
     "execution_count": 677,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#snow ball stemming\n",
    "from nltk.stem.snowball import SnowballStemmer\n",
    "def stemmed(word_list):\n",
    "    stemmed_list = []\n",
    "    stem=SnowballStemmer('english')\n",
    "    for word in word_list:\n",
    "        stemmed_list.append(stem.stem(word))\n",
    "    return stemmed_list\n",
    "\n",
    "\n",
    "\n",
    "df_pp.loc[:,'Stemmed'] =  df_pp['NLTK  tokenization'].apply(lambda x: stemmed(x)).copy()\n",
    "df_pp[['NLTK  tokenization','Stemmed']].head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Lemmatized</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>[dived, many, times, ball, managed, save, 50, ...</td>\n",
       "      <td>[dived, many, time, ball, managed, save, 50, r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>[whole, body, feels, itchy, like, fire]</td>\n",
       "      <td>[whole, body, feel, itchy, like, fire]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  NLTK  tokenization  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, times, ball, managed, save, 50, ...   \n",
       "3            [whole, body, feels, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                          Lemmatized  \n",
       "0  [awww, thats, bummer, shoulda, got, david, car...  \n",
       "1  [upset, cant, update, facebook, texting, might...  \n",
       "2  [dived, many, time, ball, managed, save, 50, r...  \n",
       "3             [whole, body, feel, itchy, like, fire]  \n",
       "4                     [behaving, im, mad, cant, see]  "
      ]
     },
     "execution_count": 678,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#lemmatization\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "\n",
    "\n",
    "def lemmatized(word_list):\n",
    "    lemm=WordNetLemmatizer()\n",
    "    lemmatized_list = []\n",
    "    for word in word_list:\n",
    "        lemmatized_list.append(lemm.lemmatize(word))\n",
    "    return lemmatized_list\n",
    "\n",
    "\n",
    "\n",
    "df_pp.loc[:,'Lemmatized'] =  df_pp['NLTK  tokenization'].apply(lambda x: lemmatized(x)).copy()\n",
    "df_pp[['NLTK  tokenization','Lemmatized']].head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We are renaming the lemmatised column to clean_text column which will be considered as our cleaned text data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 679,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>clean_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>dived many time ball managed save 50 rest go b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>whole body feel itchy like fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199995</td>\n",
       "      <td>haha remark maternity leave fired little</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199996</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199997</td>\n",
       "      <td>okie doke time escape north massas back turned...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199998</td>\n",
       "      <td>finished lesson hooray</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>199999</td>\n",
       "      <td>ppl fucking kp0 cb stop asking laa love boyfri...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               clean_text\n",
       "0       awww thats bummer shoulda got david carr third...\n",
       "1       upset cant update facebook texting might cry r...\n",
       "2       dived many time ball managed save 50 rest go b...\n",
       "3                         whole body feel itchy like fire\n",
       "4                                behaving im mad cant see\n",
       "...                                                   ...\n",
       "199995           haha remark maternity leave fired little\n",
       "199996                                                   \n",
       "199997  okie doke time escape north massas back turned...\n",
       "199998                             finished lesson hooray\n",
       "199999  ppl fucking kp0 cb stop asking laa love boyfri...\n",
       "\n",
       "[200000 rows x 1 columns]"
      ]
     },
     "execution_count": 679,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modall = df_pp['Lemmatized'].apply(lambda x:  ' '.join(x))\n",
    "\n",
    "modall1 = modall.to_frame()\n",
    "\n",
    "modall1 = modall1.rename(columns={\"Lemmatized\": \"clean_text\"}) \n",
    "\n",
    "modall1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 680,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pp = pd.concat([df_pp,modall1], axis = 1)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 681,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>starting with @</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls and hashtags and puncs and other symbols</th>\n",
       "      <th>without any urls,hashtags,puncs,other symbols and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - awww, t...</td>\n",
       "      <td>http://twitpic.com/2y1zl - awww, that's a bum...</td>\n",
       "      <td>- awww, that's a bummer.  you shoulda got da...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>[awww, that, bummer, shoulda, got, david, carr...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>[upset, cant, updat, facebook, text, might, cr...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>@kenichan i dived many times for the ball. man...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>dived many times ball managed save 50 rest go ...</td>\n",
       "      <td>[dived, many, times, ball, managed, save, 50, ...</td>\n",
       "      <td>[dive, mani, time, ball, manag, save, 50, rest...</td>\n",
       "      <td>[dived, many, time, ball, managed, save, 50, r...</td>\n",
       "      <td>dived many time ball managed save 50 rest go b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>whole body feels itchy like fire</td>\n",
       "      <td>[whole, body, feels, itchy, like, fire]</td>\n",
       "      <td>[whole, bodi, feel, itchi, like, fire]</td>\n",
       "      <td>[whole, body, feel, itchy, like, fire]</td>\n",
       "      <td>whole body feel itchy like fire</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>[behav, im, mad, cant, see]</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - Awww, t...   \n",
       "1  is upset that he can't update his Facebook by ...   \n",
       "2  @Kenichan I dived many times for the ball. Man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - awww, t...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2  @kenichan i dived many times for the ball. man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     starting with @  \\\n",
       "0   http://twitpic.com/2y1zl - awww, that's a bum...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    - awww, that's a bummer.  you shoulda got da...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0     awww thats a bummer  you shoulda got david ...   \n",
       "1  is upset that he cant update his facebook by t...   \n",
       "2   i dived many times for the ball managed to sa...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no its not behaving at all im mad why am i he...   \n",
       "\n",
       "  without any urls and hashtags and puncs and other symbols  \\\n",
       "0     awww thats a bummer  you shoulda got david ...          \n",
       "1  is upset that he cant update his facebook by t...          \n",
       "2   i dived many times for the ball managed to sa...          \n",
       "3    my whole body feels itchy and like its on fire           \n",
       "4   no its not behaving at all im mad why am i he...          \n",
       "\n",
       "  without any urls,hashtags,puncs,other symbols and stopwords  \\\n",
       "0  awww thats bummer shoulda got david carr third...            \n",
       "1  upset cant update facebook texting might cry r...            \n",
       "2  dived many times ball managed save 50 rest go ...            \n",
       "3                   whole body feels itchy like fire            \n",
       "4                           behaving im mad cant see            \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, times, ball, managed, save, 50, ...   \n",
       "3            [whole, body, feels, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [awww, that, bummer, shoulda, got, david, carr...   \n",
       "1  [upset, cant, updat, facebook, text, might, cr...   \n",
       "2  [dive, mani, time, ball, manag, save, 50, rest...   \n",
       "3             [whole, bodi, feel, itchi, like, fire]   \n",
       "4                        [behav, im, mad, cant, see]   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, time, ball, managed, save, 50, r...   \n",
       "3             [whole, body, feel, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                          clean_text  \n",
       "0  awww thats bummer shoulda got david carr third...  \n",
       "1  upset cant update facebook texting might cry r...  \n",
       "2  dived many time ball managed save 50 rest go b...  \n",
       "3                    whole body feel itchy like fire  \n",
       "4                           behaving im mad cant see  "
      ]
     },
     "execution_count": 681,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  Exploratory Data Analysis for canada elections csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 682,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  \n",
       "0  instead suggestion agree canadian woman trust ...  \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...  \n",
       "2  brantford going cost 94 billion next 4 year as...  \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...  \n",
       "4  canada taxpayer sick amp tired hard earned don...  "
      ]
     },
     "execution_count": 682,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 683,
   "metadata": {},
   "outputs": [],
   "source": [
    "sentiment = elections[['sentiment']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 684,
   "metadata": {},
   "outputs": [],
   "source": [
    "election_pp = pd.concat([sentiment,election_pp], axis =1 )\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 685,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>negative</td>\n",
       "      <td>You know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>[know, good, enough, job, smear, campaign, rig...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>negative</td>\n",
       "      <td>You missed the comment. Deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment deflecting the issue do...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>[miss, comment, deflect, issu, answer, best, r...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>positive</td>\n",
       "      <td>Your daily reminder:\\n@theJagmeetSingh endorse...</td>\n",
       "      <td>your daily reminder:\\n@thejagmeetsingh endorse...</td>\n",
       "      <td>your daily reminder:\\n  endorses strategic vot...</td>\n",
       "      <td>your daily reminder endorses strategic voting ...</td>\n",
       "      <td>daily reminder endorses strategic voting elxn4...</td>\n",
       "      <td>[daily, reminder, endorses, strategic, voting,...</td>\n",
       "      <td>[daili, remind, endors, strateg, vote, elxn43,...</td>\n",
       "      <td>[daily, reminder, endorses, strategic, voting,...</td>\n",
       "      <td>daily reminder endorses strategic voting elxn4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>negative</td>\n",
       "      <td>Yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup not going to reopen the abortion debate el...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>[yup, go, reopen, abort, debat, elxn43, scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>positive</td>\n",
       "      <td>Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p</td>\n",
       "      <td>zing.\\n#ndp #elxn43 https://t.co/xo6qe4jv3p</td>\n",
       "      <td>zing.\\n ndp  elxn43</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "      <td>[zing, ndp, elxn43]</td>\n",
       "      <td>[zing, ndp, elxn43]</td>\n",
       "      <td>[zing, ndp, elxn43]</td>\n",
       "      <td>zing ndp elxn43</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     sentiment                                            decoded  \\\n",
       "0     negative  @RosieBarton So instead of your suggestion, ho...   \n",
       "1     positive  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2     negative  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3     positive  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4     negative  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "...        ...                                                ...   \n",
       "2128  negative  You know he was doing a good enough job smeari...   \n",
       "2129  negative  You missed the comment. Deflecting the issue d...   \n",
       "2130  positive  Your daily reminder:\\n@theJagmeetSingh endorse...   \n",
       "2131  negative  Yup...not going to reopen the abortion debate....   \n",
       "2132  positive        Zing.\\n#NDP #elxn43 https://t.co/xo6Qe4jV3p   \n",
       "\n",
       "                                        lower_case_text  \\\n",
       "0     @rosiebarton so instead of your suggestion, ho...   \n",
       "1     #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2     #brantford it's going to cost you $94 billion ...   \n",
       "3     #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4     #canada #taxpayers are sick &amp; tired of hav...   \n",
       "...                                                 ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2130  your daily reminder:\\n@thejagmeetsingh endorse...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "2132        zing.\\n#ndp #elxn43 https://t.co/xo6qe4jv3p   \n",
       "\n",
       "                          without any urls and hashtags  \\\n",
       "0       so instead of your suggestion, how about we ...   \n",
       "1      allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2      brantford it's going to cost you $94 billion ...   \n",
       "3      canada  canadaelection2019  canadavotes \\n el...   \n",
       "4      canada  taxpayers are sick &amp; tired of hav...   \n",
       "...                                                 ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2130  your daily reminder:\\n  endorses strategic vot...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "2132                              zing.\\n ndp  elxn43     \n",
       "\n",
       "                without any urls and hashtags and puncs  \\\n",
       "0      so instead of your suggestion how about we ag...   \n",
       "1      allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2      brantford it s going to cost you 94 billion f...   \n",
       "3      canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4      canada taxpayers are sick amp tired of having...   \n",
       "...                                                 ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment deflecting the issue do...   \n",
       "2130  your daily reminder endorses strategic voting ...   \n",
       "2131  yup not going to reopen the abortion debate el...   \n",
       "2132                                   zing ndp elxn43    \n",
       "\n",
       "          without any urls,hashtags,puncs and stopwords  \\\n",
       "0     instead suggestion agree canadian women trust ...   \n",
       "1     allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2     brantford going cost 94 billion next 4 years a...   \n",
       "3     canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4     canada taxpayers sick amp tired hard earned do...   \n",
       "...                                                 ...   \n",
       "2128  know good enough job smearing campaign right c...   \n",
       "2129  missed comment deflecting issue answer best re...   \n",
       "2130  daily reminder endorses strategic voting elxn4...   \n",
       "2131  yup going reopen abortion debate elxn43 scheer...   \n",
       "2132                                    zing ndp elxn43   \n",
       "\n",
       "                                     NLTK  tokenization  \\\n",
       "0     [instead, suggestion, agree, canadian, women, ...   \n",
       "1     [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3     [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4     [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "...                                                 ...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2130  [daily, reminder, endorses, strategic, voting,...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "2132                                [zing, ndp, elxn43]   \n",
       "\n",
       "                                                Stemmed  \\\n",
       "0     [instead, suggest, agre, canadian, women, trus...   \n",
       "1     [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2     [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3     [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4     [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "...                                                 ...   \n",
       "2128  [know, good, enough, job, smear, campaign, rig...   \n",
       "2129  [miss, comment, deflect, issu, answer, best, r...   \n",
       "2130  [daili, remind, endors, strateg, vote, elxn43,...   \n",
       "2131  [yup, go, reopen, abort, debat, elxn43, scheer...   \n",
       "2132                                [zing, ndp, elxn43]   \n",
       "\n",
       "                                             Lemmatized  \\\n",
       "0     [instead, suggestion, agree, canadian, woman, ...   \n",
       "1     [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3     [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4     [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "...                                                 ...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2130  [daily, reminder, endorses, strategic, voting,...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "2132                                [zing, ndp, elxn43]   \n",
       "\n",
       "                                   clean_text_elections  \n",
       "0     instead suggestion agree canadian woman trust ...  \n",
       "1     allwomanspacewalk real etobicokenorth cityofto...  \n",
       "2     brantford going cost 94 billion next 4 year as...  \n",
       "3     canada canadaelection2019 canadavotes elxn43 d...  \n",
       "4     canada taxpayer sick amp tired hard earned don...  \n",
       "...                                                 ...  \n",
       "2128  know good enough job smearing campaign right c...  \n",
       "2129  missed comment deflecting issue answer best re...  \n",
       "2130  daily reminder endorses strategic voting elxn4...  \n",
       "2131  yup going reopen abortion debate elxn43 scheer...  \n",
       "2132                                    zing ndp elxn43  \n",
       "\n",
       "[2133 rows x 10 columns]"
      ]
     },
     "execution_count": 685,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now adding sentiment value to the sentiment column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  sentiment                                            decoded  \\\n",
       "0  negative  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  positive  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  negative  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  positive  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  negative  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \n",
       "0  instead suggestion agree canadian woman trust ...                0  \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...                4  \n",
       "2  brantford going cost 94 billion next 4 year as...                0  \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...                4  \n",
       "4  canada taxpayer sick amp tired hard earned don...                0  "
      ]
     },
     "execution_count": 686,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp['sentiment_value']= election_pp['sentiment'].apply(lambda x: 4 if x =='positive' else 0)\n",
    "election_pp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now adding the negative reason column to the existing data frame from the old elections df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "metadata": {},
   "outputs": [],
   "source": [
    "negative_reason = elections['negative_reason']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 688,
   "metadata": {},
   "outputs": [],
   "source": [
    "election_pp = pd.concat([negative_reason,election_pp], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "1                                  NaN  positive   \n",
       "2                              Economy  negative   \n",
       "3                                  NaN  positive   \n",
       "4                              Economy  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \n",
       "0  instead suggestion agree canadian woman trust ...                0  \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...                4  \n",
       "2  brantford going cost 94 billion next 4 year as...                0  \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...                4  \n",
       "4  canada taxpayer sick amp tired hard earned don...                0  "
      ]
     },
     "execution_count": 689,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### It can be observed that the total number of positive tweets is 1127 and the total number of negative tweets is 1006"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Total Number of Positive and Negative Tweets')"
      ]
     },
     "execution_count": 690,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "colors=['red','green']\n",
    "election_pp.sentiment.value_counts().plot(kind='bar',color=colors)\n",
    "plt.ylabel('No. of Tweets')\n",
    "plt.title('Total Number of Positive and Negative Tweets')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now adding Political parties columns for the visualising in the bar graph below"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>4</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>4</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "1                                  NaN  positive   \n",
       "2                              Economy  negative   \n",
       "3                                  NaN  positive   \n",
       "4                              Economy  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \\\n",
       "0  instead suggestion agree canadian woman trust ...                0   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...                4   \n",
       "2  brantford going cost 94 billion next 4 year as...                0   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...                4   \n",
       "4  canada taxpayer sick amp tired hard earned don...                0   \n",
       "\n",
       "  political parties  \n",
       "0                    \n",
       "1                    \n",
       "2                    \n",
       "3                    \n",
       "4                    "
      ]
     },
     "execution_count": 691,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp['political parties'] = \"\"\n",
    "\n",
    "election_pp.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 692,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(len(election_pp['lower_case_text'])):\n",
    "    \n",
    "    if ((pd.Series(election_pp['lower_case_text'][i]).str.contains('justin|trudeau|justintrudeau|liberal|lpc')[0]) & (pd.Series(election_pp['lower_case_text'][i]).str.contains('andrew|scheer|andrewscheer|conservative|cpc')[0]) |  (pd.Series(election_pp['lower_case_text'][i]).str.contains('justin|trudeau|justintrudeau|liberal|lpc')[0]) & (pd.Series(election_pp['lower_case_text'][i]).str.contains('thejagmeetsingh|ndp|jagmeet|singh|democractic')[0]) |   (pd.Series(election_pp['lower_case_text'][i]).str.contains('andrew|scheer|andrewscheer|conservative|cpc')[0]) &   (pd.Series(election_pp['lower_case_text'][i]).str.contains('thejagmeetsingh|ndp|jagmeet|singh|democractic')[0])):\n",
    "        election_pp['political parties'][i] = 'Mixture of all parties'\n",
    "        \n",
    "    elif (pd.Series(election_pp['lower_case_text'][i]).str.contains('justin|trudeau|justintrudeau|liberal|lpc')[0]):\n",
    "        election_pp['political parties'][i] = 'liberals'\n",
    "    \n",
    "    elif (pd.Series(election_pp['lower_case_text'][i]).str.contains('andrew|scheer|andrewscheer|conservative|cpc')[0]):\n",
    "         election_pp['political parties'][i] = 'Conservative'\n",
    "    \n",
    "    elif (pd.Series(election_pp['lower_case_text'][i]).str.contains('thejagmeetsingh|ndp|jagmeet|singh|democractic')[0]):\n",
    "         election_pp['political parties'][i] = 'NDP'\n",
    "            \n",
    "    else:\n",
    "         election_pp['political parties'][i] = 'None'\n",
    "        \n",
    "    \n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 693,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "None                      930\n",
       "Conservative              467\n",
       "liberals                  304\n",
       "Mixture of all parties    279\n",
       "NDP                       153\n",
       "Name: political parties, dtype: int64"
      ]
     },
     "execution_count": 693,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp['political parties'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 694,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sentiments')"
      ]
     },
     "execution_count": 694,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = pd.crosstab(election_pp['political parties'],election_pp['sentiment']).plot(kind='bar',figsize=(10,6),color=['blue','red'],width=0.75,)\n",
    "ax.set_title(\"Total sentiments\",fontsize=20)\n",
    "ax.set_xlabel(\"Political Parties\",fontsize=18)\n",
    "ax.set_ylabel(\"Sentiments\",fontsize=18) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explanation\n",
    "\n",
    "#### From the above graphs , it can be seen that distribution of political affiliations of the tweets is slighlty towards the 'None' side. This means that most of the people who tweeted about the election did not try to support any parties in particular. \n",
    "\n",
    "#### In terms of positive and negative reviews, most of the people have tweeted positively about the elections than the negative comments.\n",
    "\n",
    "#### It can be seen that almost all the parties have negative reviews than the positive reviews but there is a exception for NDP . Even the support and mentions from the people are less, they have more positive reviews than the negative reviews. Whereas conservative parties have the most negative comments about them. Liberals have mixed reviews among the people. i.e half of the people have negative reviews and the other half has positive reviews.\n",
    "\n",
    "#### Also it can be seen that the second highest tweets comes for the conservative party because the tweets were more related to the conservative party and mentions of AndrewScheer. Liberals and Mixture of all parties are somewhat similar in terms of support and tweets from people while NDP has the least mentions which means less support from the people."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exploratory Data Analysis for generic tweets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Word Clouds are formed for both the positive and negative tweets which will give us the most frequent words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 695,
   "metadata": {},
   "outputs": [],
   "source": [
    "emotions = df[['Emotions_class']]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 696,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pp = pd.concat([df_pp,emotions], axis = 1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 697,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>starting with @</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls and hashtags and puncs and other symbols</th>\n",
       "      <th>without any urls,hashtags,puncs,other symbols and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>Emotions_class</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - awww, t...</td>\n",
       "      <td>http://twitpic.com/2y1zl - awww, that's a bum...</td>\n",
       "      <td>- awww, that's a bummer.  you shoulda got da...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>[awww, that, bummer, shoulda, got, david, carr...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>[upset, cant, updat, facebook, text, might, cr...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>@kenichan i dived many times for the ball. man...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>dived many times ball managed save 50 rest go ...</td>\n",
       "      <td>[dived, many, times, ball, managed, save, 50, ...</td>\n",
       "      <td>[dive, mani, time, ball, manag, save, 50, rest...</td>\n",
       "      <td>[dived, many, time, ball, managed, save, 50, r...</td>\n",
       "      <td>dived many time ball managed save 50 rest go b...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>whole body feels itchy like fire</td>\n",
       "      <td>[whole, body, feels, itchy, like, fire]</td>\n",
       "      <td>[whole, bodi, feel, itchi, like, fire]</td>\n",
       "      <td>[whole, body, feel, itchy, like, fire]</td>\n",
       "      <td>whole body feel itchy like fire</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>[behav, im, mad, cant, see]</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - Awww, t...   \n",
       "1  is upset that he can't update his Facebook by ...   \n",
       "2  @Kenichan I dived many times for the ball. Man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - awww, t...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2  @kenichan i dived many times for the ball. man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     starting with @  \\\n",
       "0   http://twitpic.com/2y1zl - awww, that's a bum...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    - awww, that's a bummer.  you shoulda got da...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0     awww thats a bummer  you shoulda got david ...   \n",
       "1  is upset that he cant update his facebook by t...   \n",
       "2   i dived many times for the ball managed to sa...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no its not behaving at all im mad why am i he...   \n",
       "\n",
       "  without any urls and hashtags and puncs and other symbols  \\\n",
       "0     awww thats a bummer  you shoulda got david ...          \n",
       "1  is upset that he cant update his facebook by t...          \n",
       "2   i dived many times for the ball managed to sa...          \n",
       "3    my whole body feels itchy and like its on fire           \n",
       "4   no its not behaving at all im mad why am i he...          \n",
       "\n",
       "  without any urls,hashtags,puncs,other symbols and stopwords  \\\n",
       "0  awww thats bummer shoulda got david carr third...            \n",
       "1  upset cant update facebook texting might cry r...            \n",
       "2  dived many times ball managed save 50 rest go ...            \n",
       "3                   whole body feels itchy like fire            \n",
       "4                           behaving im mad cant see            \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, times, ball, managed, save, 50, ...   \n",
       "3            [whole, body, feels, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [awww, that, bummer, shoulda, got, david, carr...   \n",
       "1  [upset, cant, updat, facebook, text, might, cr...   \n",
       "2  [dive, mani, time, ball, manag, save, 50, rest...   \n",
       "3             [whole, bodi, feel, itchi, like, fire]   \n",
       "4                        [behav, im, mad, cant, see]   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, time, ball, managed, save, 50, r...   \n",
       "3             [whole, body, feel, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                          clean_text  Emotions_class  \n",
       "0  awww thats bummer shoulda got david carr third...               0  \n",
       "1  upset cant update facebook texting might cry r...               0  \n",
       "2  dived many time ball managed save 50 rest go b...               0  \n",
       "3                    whole body feel itchy like fire               0  \n",
       "4                           behaving im mad cant see               0  "
      ]
     },
     "execution_count": 697,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 698,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: wordcloud in c:\\users\\user\\anaconda3\\lib\\site-packages (1.5.0)\n",
      "Requirement already satisfied: numpy>=1.6.1 in c:\\users\\user\\anaconda3\\lib\\site-packages (from wordcloud) (1.16.4)\n",
      "Requirement already satisfied: pillow in c:\\users\\user\\anaconda3\\lib\\site-packages (from wordcloud) (6.1.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install wordcloud\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Word cloud has been formed for all the positive tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from wordcloud import WordCloud\n",
    "word1 = df_pp[df_pp['Emotions_class']==4]\n",
    "total_text = \" \".join(words for words in word1['clean_text'] )\n",
    "wordcloud = WordCloud(width=600, height=400, random_state=21, max_font_size=150,background_color=\"white\").generate(total_text)\n",
    "plt.figure(figsize=(10, 7))\n",
    "plt.imshow(wordcloud, interpolation=\"bilinear\")\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### It can be observed that the most common words are 'Love','thank','lol','good','today' etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Word cloud has been formed for all the negative tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "word2 = df_pp[df_pp['Emotions_class']==0]\n",
    "total_text1 = \" \".join(words for words in word2['clean_text'] )\n",
    "wordcloud1 = WordCloud(width=600, height=400, random_state=21, max_font_size=150,background_color=\"white\").generate(total_text1)\n",
    "plt.figure(figsize=(10, 7))\n",
    "plt.imshow(wordcloud1, interpolation=\"bilinear\")\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### It can be observed that the most common words are 'today','time','work','one','day','got' etc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now we visualize the length of the clean_text columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 701,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    200000.000000\n",
       "mean         43.323940\n",
       "std          24.304761\n",
       "min           0.000000\n",
       "25%          24.000000\n",
       "50%          40.000000\n",
       "75%          61.000000\n",
       "max         144.000000\n",
       "Name: length of clean_text, dtype: float64"
      ]
     },
     "execution_count": 701,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp['length of clean_text'] = df_pp['clean_text'].apply(len)\n",
    "\n",
    "df_pp['length of clean_text'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 702,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>text</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>starting with @</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls and hashtags and puncs and other symbols</th>\n",
       "      <th>without any urls,hashtags,puncs,other symbols and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text</th>\n",
       "      <th>Emotions_class</th>\n",
       "      <th>length of clean_text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n",
       "      <td>@switchfoot http://twitpic.com/2y1zl - awww, t...</td>\n",
       "      <td>http://twitpic.com/2y1zl - awww, that's a bum...</td>\n",
       "      <td>- awww, that's a bummer.  you shoulda got da...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats a bummer  you shoulda got david ...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>[awww, that, bummer, shoulda, got, david, carr...</td>\n",
       "      <td>[awww, thats, bummer, shoulda, got, david, car...</td>\n",
       "      <td>awww thats bummer shoulda got david carr third...</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>is upset that he can't update his Facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he can't update his facebook by ...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>is upset that he cant update his facebook by t...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>[upset, cant, updat, facebook, text, might, cr...</td>\n",
       "      <td>[upset, cant, update, facebook, texting, might...</td>\n",
       "      <td>upset cant update facebook texting might cry r...</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>@Kenichan I dived many times for the ball. Man...</td>\n",
       "      <td>@kenichan i dived many times for the ball. man...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball. managed to s...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>i dived many times for the ball managed to sa...</td>\n",
       "      <td>dived many times ball managed save 50 rest go ...</td>\n",
       "      <td>[dived, many, times, ball, managed, save, 50, ...</td>\n",
       "      <td>[dive, mani, time, ball, manag, save, 50, rest...</td>\n",
       "      <td>[dived, many, time, ball, managed, save, 50, r...</td>\n",
       "      <td>dived many time ball managed save 50 rest go b...</td>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>my whole body feels itchy and like its on fire</td>\n",
       "      <td>whole body feels itchy like fire</td>\n",
       "      <td>[whole, body, feels, itchy, like, fire]</td>\n",
       "      <td>[whole, bodi, feel, itchi, like, fire]</td>\n",
       "      <td>[whole, body, feel, itchy, like, fire]</td>\n",
       "      <td>whole body feel itchy like fire</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>@nationwideclass no, it's not behaving at all....</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no, it's not behaving at all. i'm mad. why am...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>no its not behaving at all im mad why am i he...</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>[behav, im, mad, cant, see]</td>\n",
       "      <td>[behaving, im, mad, cant, see]</td>\n",
       "      <td>behaving im mad cant see</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - Awww, t...   \n",
       "1  is upset that he can't update his Facebook by ...   \n",
       "2  @Kenichan I dived many times for the ball. Man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @switchfoot http://twitpic.com/2y1zl - awww, t...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2  @kenichan i dived many times for the ball. man...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4  @nationwideclass no, it's not behaving at all....   \n",
       "\n",
       "                                     starting with @  \\\n",
       "0   http://twitpic.com/2y1zl - awww, that's a bum...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    - awww, that's a bummer.  you shoulda got da...   \n",
       "1  is upset that he can't update his facebook by ...   \n",
       "2   i dived many times for the ball. managed to s...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no, it's not behaving at all. i'm mad. why am...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0     awww thats a bummer  you shoulda got david ...   \n",
       "1  is upset that he cant update his facebook by t...   \n",
       "2   i dived many times for the ball managed to sa...   \n",
       "3    my whole body feels itchy and like its on fire    \n",
       "4   no its not behaving at all im mad why am i he...   \n",
       "\n",
       "  without any urls and hashtags and puncs and other symbols  \\\n",
       "0     awww thats a bummer  you shoulda got david ...          \n",
       "1  is upset that he cant update his facebook by t...          \n",
       "2   i dived many times for the ball managed to sa...          \n",
       "3    my whole body feels itchy and like its on fire           \n",
       "4   no its not behaving at all im mad why am i he...          \n",
       "\n",
       "  without any urls,hashtags,puncs,other symbols and stopwords  \\\n",
       "0  awww thats bummer shoulda got david carr third...            \n",
       "1  upset cant update facebook texting might cry r...            \n",
       "2  dived many times ball managed save 50 rest go ...            \n",
       "3                   whole body feels itchy like fire            \n",
       "4                           behaving im mad cant see            \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, times, ball, managed, save, 50, ...   \n",
       "3            [whole, body, feels, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [awww, that, bummer, shoulda, got, david, carr...   \n",
       "1  [upset, cant, updat, facebook, text, might, cr...   \n",
       "2  [dive, mani, time, ball, manag, save, 50, rest...   \n",
       "3             [whole, bodi, feel, itchi, like, fire]   \n",
       "4                        [behav, im, mad, cant, see]   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [awww, thats, bummer, shoulda, got, david, car...   \n",
       "1  [upset, cant, update, facebook, texting, might...   \n",
       "2  [dived, many, time, ball, managed, save, 50, r...   \n",
       "3             [whole, body, feel, itchy, like, fire]   \n",
       "4                     [behaving, im, mad, cant, see]   \n",
       "\n",
       "                                          clean_text  Emotions_class  \\\n",
       "0  awww thats bummer shoulda got david carr third...               0   \n",
       "1  upset cant update facebook texting might cry r...               0   \n",
       "2  dived many time ball managed save 50 rest go b...               0   \n",
       "3                    whole body feel itchy like fire               0   \n",
       "4                           behaving im mad cant see               0   \n",
       "\n",
       "   length of clean_text  \n",
       "0                    50  \n",
       "1                    74  \n",
       "2                    50  \n",
       "3                    31  \n",
       "4                    24  "
      ]
     },
     "execution_count": 702,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 703,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2a1ad06e278>"
      ]
     },
     "execution_count": 703,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_pp['length of clean_text'].plot.hist(bins = 150)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 704,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    2133.000000\n",
       "mean      114.067979\n",
       "std        51.014635\n",
       "min        11.000000\n",
       "25%        72.000000\n",
       "50%       111.000000\n",
       "75%       156.000000\n",
       "max       234.000000\n",
       "Name: clean_text_elections, dtype: float64"
      ]
     },
     "execution_count": 704,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "length = election_pp['clean_text_elections'].apply(len)\n",
    "\n",
    "length.describe()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 705,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x2a1898d3e80>"
      ]
     },
     "execution_count": 705,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "length.plot.hist(bins = 150)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODEL PREPARATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 706,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 707,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         awww thats bummer shoulda got david carr third...\n",
       "1         upset cant update facebook texting might cry r...\n",
       "2         dived many time ball managed save 50 rest go b...\n",
       "3                           whole body feel itchy like fire\n",
       "4                                  behaving im mad cant see\n",
       "                                ...                        \n",
       "199995             haha remark maternity leave fired little\n",
       "199996                                                     \n",
       "199997    okie doke time escape north massas back turned...\n",
       "199998                               finished lesson hooray\n",
       "199999    ppl fucking kp0 cb stop asking laa love boyfri...\n",
       "Name: clean_text, Length: 200000, dtype: object"
      ]
     },
     "execution_count": 707,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_pp['clean_text']\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### BAG OF WORDS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 708,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000\n",
      "Shape of the Sparse Matrix: (200000, 1000)\n"
     ]
    }
   ],
   "source": [
    "bow = CountVectorizer(max_features = 1000).fit(df_pp['clean_text'])\n",
    "print(len(bow.vocabulary_))\n",
    "\n",
    "text_bow = bow.transform(df_pp['clean_text'])\n",
    "\n",
    "print(\"Shape of the Sparse Matrix:\", text_bow.shape)\n",
    "\n",
    "\n",
    "\n",
    "#print(\"text_bow:\\n{}\".format(repr(text_bow)))\n",
    "\n",
    "\n",
    "#feature = vect.get_feature_names()\n",
    "\n",
    "#print(feature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 709,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "text_bow:\n",
      "<200000x1000 sparse matrix of type '<class 'numpy.int64'>'\n",
      "\twith 941221 stored elements in Compressed Sparse Row format>\n"
     ]
    }
   ],
   "source": [
    "print(\"text_bow:\\n{}\".format(repr(text_bow)))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 710,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['10',\n",
       " '100',\n",
       " '11',\n",
       " '12',\n",
       " '15',\n",
       " '17',\n",
       " '1st',\n",
       " '20',\n",
       " '25',\n",
       " '2day',\n",
       " '2nd',\n",
       " '30',\n",
       " 'able',\n",
       " 'absolutely',\n",
       " 'account',\n",
       " 'ache',\n",
       " 'actually',\n",
       " 'adam',\n",
       " 'add',\n",
       " 'afternoon',\n",
       " 'age',\n",
       " 'ago',\n",
       " 'agree',\n",
       " 'ah',\n",
       " 'ahead',\n",
       " 'ahh',\n",
       " 'ahhh',\n",
       " 'aint',\n",
       " 'air',\n",
       " 'airport',\n",
       " 'album',\n",
       " 'almost',\n",
       " 'alone',\n",
       " 'along',\n",
       " 'alot',\n",
       " 'already',\n",
       " 'alright',\n",
       " 'also',\n",
       " 'although',\n",
       " 'always',\n",
       " 'amazing',\n",
       " 'amp',\n",
       " 'annoying',\n",
       " 'another',\n",
       " 'answer',\n",
       " 'anymore',\n",
       " 'anyone',\n",
       " 'anything',\n",
       " 'anyway',\n",
       " 'app',\n",
       " 'apparently',\n",
       " 'apple',\n",
       " 'appreciate',\n",
       " 'april',\n",
       " 'arent',\n",
       " 'argh',\n",
       " 'arm',\n",
       " 'around',\n",
       " 'art',\n",
       " 'as',\n",
       " 'ask',\n",
       " 'asked',\n",
       " 'asleep',\n",
       " 'asot400',\n",
       " 'assignment',\n",
       " 'ate',\n",
       " 'australia',\n",
       " 'aw',\n",
       " 'awake',\n",
       " 'away',\n",
       " 'awesome',\n",
       " 'awful',\n",
       " 'aww',\n",
       " 'awww',\n",
       " 'babe',\n",
       " 'baby',\n",
       " 'back',\n",
       " 'bad',\n",
       " 'bag',\n",
       " 'ball',\n",
       " 'bamboozle',\n",
       " 'band',\n",
       " 'bank',\n",
       " 'bar',\n",
       " 'bbq',\n",
       " 'bc',\n",
       " 'bday',\n",
       " 'beach',\n",
       " 'beat',\n",
       " 'beautiful',\n",
       " 'bed',\n",
       " 'beer',\n",
       " 'behind',\n",
       " 'believe',\n",
       " 'best',\n",
       " 'bet',\n",
       " 'better',\n",
       " 'big',\n",
       " 'bike',\n",
       " 'bird',\n",
       " 'birthday',\n",
       " 'bit',\n",
       " 'bitch',\n",
       " 'black',\n",
       " 'blog',\n",
       " 'bloody',\n",
       " 'blue',\n",
       " 'body',\n",
       " 'boo',\n",
       " 'book',\n",
       " 'bored',\n",
       " 'boring',\n",
       " 'bought',\n",
       " 'bout',\n",
       " 'box',\n",
       " 'boy',\n",
       " 'boyfriend',\n",
       " 'brain',\n",
       " 'break',\n",
       " 'breakfast',\n",
       " 'bring',\n",
       " 'bro',\n",
       " 'broke',\n",
       " 'broken',\n",
       " 'brother',\n",
       " 'btw',\n",
       " 'buddy',\n",
       " 'bug',\n",
       " 'bummed',\n",
       " 'bus',\n",
       " 'business',\n",
       " 'busy',\n",
       " 'buy',\n",
       " 'bye',\n",
       " 'cake',\n",
       " 'call',\n",
       " 'called',\n",
       " 'came',\n",
       " 'camera',\n",
       " 'can',\n",
       " 'cant',\n",
       " 'car',\n",
       " 'card',\n",
       " 'care',\n",
       " 'case',\n",
       " 'cat',\n",
       " 'catch',\n",
       " 'caught',\n",
       " 'cause',\n",
       " 'cd',\n",
       " 'chance',\n",
       " 'change',\n",
       " 'changed',\n",
       " 'channel',\n",
       " 'chat',\n",
       " 'check',\n",
       " 'checking',\n",
       " 'cheer',\n",
       " 'cheese',\n",
       " 'chicken',\n",
       " 'child',\n",
       " 'chillin',\n",
       " 'chocolate',\n",
       " 'church',\n",
       " 'city',\n",
       " 'class',\n",
       " 'clean',\n",
       " 'cleaning',\n",
       " 'close',\n",
       " 'closed',\n",
       " 'clothes',\n",
       " 'club',\n",
       " 'co',\n",
       " 'coffee',\n",
       " 'cold',\n",
       " 'college',\n",
       " 'come',\n",
       " 'coming',\n",
       " 'comment',\n",
       " 'company',\n",
       " 'completely',\n",
       " 'computer',\n",
       " 'concert',\n",
       " 'confused',\n",
       " 'congrats',\n",
       " 'cook',\n",
       " 'cool',\n",
       " 'could',\n",
       " 'couldnt',\n",
       " 'country',\n",
       " 'couple',\n",
       " 'course',\n",
       " 'cousin',\n",
       " 'coz',\n",
       " 'crap',\n",
       " 'crazy',\n",
       " 'cream',\n",
       " 'cry',\n",
       " 'cup',\n",
       " 'currently',\n",
       " 'cut',\n",
       " 'cute',\n",
       " 'cuz',\n",
       " 'da',\n",
       " 'dad',\n",
       " 'damn',\n",
       " 'dance',\n",
       " 'dancing',\n",
       " 'dark',\n",
       " 'date',\n",
       " 'daughter',\n",
       " 'david',\n",
       " 'day',\n",
       " 'dead',\n",
       " 'deal',\n",
       " 'dear',\n",
       " 'death',\n",
       " 'decided',\n",
       " 'definitely',\n",
       " 'design',\n",
       " 'didnt',\n",
       " 'die',\n",
       " 'died',\n",
       " 'different',\n",
       " 'dinner',\n",
       " 'disappointed',\n",
       " 'dm',\n",
       " 'doctor',\n",
       " 'doesnt',\n",
       " 'dog',\n",
       " 'done',\n",
       " 'dont',\n",
       " 'door',\n",
       " 'download',\n",
       " 'dream',\n",
       " 'dress',\n",
       " 'drink',\n",
       " 'drinking',\n",
       " 'drive',\n",
       " 'driving',\n",
       " 'drunk',\n",
       " 'dude',\n",
       " 'due',\n",
       " 'dvd',\n",
       " 'dying',\n",
       " 'ear',\n",
       " 'earlier',\n",
       " 'early',\n",
       " 'easter',\n",
       " 'easy',\n",
       " 'eat',\n",
       " 'eating',\n",
       " 'egg',\n",
       " 'eh',\n",
       " 'either',\n",
       " 'else',\n",
       " 'em',\n",
       " 'email',\n",
       " 'end',\n",
       " 'ended',\n",
       " 'english',\n",
       " 'enjoy',\n",
       " 'enjoyed',\n",
       " 'enjoying',\n",
       " 'enough',\n",
       " 'episode',\n",
       " 'especially',\n",
       " 'essay',\n",
       " 'even',\n",
       " 'evening',\n",
       " 'event',\n",
       " 'ever',\n",
       " 'every',\n",
       " 'everybody',\n",
       " 'everyone',\n",
       " 'everything',\n",
       " 'exactly',\n",
       " 'exam',\n",
       " 'except',\n",
       " 'excited',\n",
       " 'exciting',\n",
       " 'exhausted',\n",
       " 'extra',\n",
       " 'eye',\n",
       " 'face',\n",
       " 'facebook',\n",
       " 'fact',\n",
       " 'fail',\n",
       " 'fair',\n",
       " 'fall',\n",
       " 'family',\n",
       " 'fan',\n",
       " 'fantastic',\n",
       " 'far',\n",
       " 'fast',\n",
       " 'fat',\n",
       " 'favorite',\n",
       " 'fb',\n",
       " 'feel',\n",
       " 'feeling',\n",
       " 'fell',\n",
       " 'felt',\n",
       " 'fight',\n",
       " 'figure',\n",
       " 'film',\n",
       " 'final',\n",
       " 'finally',\n",
       " 'find',\n",
       " 'fine',\n",
       " 'finger',\n",
       " 'finish',\n",
       " 'finished',\n",
       " 'fire',\n",
       " 'first',\n",
       " 'fit',\n",
       " 'fix',\n",
       " 'fixed',\n",
       " 'flight',\n",
       " 'flu',\n",
       " 'fly',\n",
       " 'follow',\n",
       " 'follower',\n",
       " 'following',\n",
       " 'food',\n",
       " 'foot',\n",
       " 'forever',\n",
       " 'forget',\n",
       " 'forgot',\n",
       " 'forward',\n",
       " 'found',\n",
       " 'freaking',\n",
       " 'free',\n",
       " 'french',\n",
       " 'friday',\n",
       " 'friend',\n",
       " 'front',\n",
       " 'fuck',\n",
       " 'fucking',\n",
       " 'full',\n",
       " 'fun',\n",
       " 'funny',\n",
       " 'future',\n",
       " 'game',\n",
       " 'garden',\n",
       " 'gave',\n",
       " 'germany',\n",
       " 'get',\n",
       " 'gettin',\n",
       " 'getting',\n",
       " 'gig',\n",
       " 'girl',\n",
       " 'give',\n",
       " 'giving',\n",
       " 'glad',\n",
       " 'glass',\n",
       " 'go',\n",
       " 'god',\n",
       " 'goin',\n",
       " 'going',\n",
       " 'gon',\n",
       " 'gone',\n",
       " 'good',\n",
       " 'goodbye',\n",
       " 'goodnight',\n",
       " 'google',\n",
       " 'gorgeous',\n",
       " 'got',\n",
       " 'great',\n",
       " 'green',\n",
       " 'group',\n",
       " 'gt',\n",
       " 'guess',\n",
       " 'guitar',\n",
       " 'guy',\n",
       " 'gym',\n",
       " 'ha',\n",
       " 'haha',\n",
       " 'hahah',\n",
       " 'hahaha',\n",
       " 'hair',\n",
       " 'half',\n",
       " 'hand',\n",
       " 'hang',\n",
       " 'hanging',\n",
       " 'hannah',\n",
       " 'happen',\n",
       " 'happened',\n",
       " 'happens',\n",
       " 'happy',\n",
       " 'hard',\n",
       " 'hasnt',\n",
       " 'hate',\n",
       " 'havent',\n",
       " 'he',\n",
       " 'head',\n",
       " 'headache',\n",
       " 'headed',\n",
       " 'heading',\n",
       " 'hear',\n",
       " 'heard',\n",
       " 'heart',\n",
       " 'hehe',\n",
       " 'hell',\n",
       " 'hello',\n",
       " 'help',\n",
       " 'hey',\n",
       " 'hi',\n",
       " 'high',\n",
       " 'hill',\n",
       " 'hit',\n",
       " 'hmm',\n",
       " 'hmmm',\n",
       " 'hold',\n",
       " 'holiday',\n",
       " 'home',\n",
       " 'homework',\n",
       " 'hope',\n",
       " 'hopefully',\n",
       " 'hoping',\n",
       " 'horrible',\n",
       " 'hospital',\n",
       " 'hot',\n",
       " 'hotel',\n",
       " 'hour',\n",
       " 'house',\n",
       " 'hows',\n",
       " 'hr',\n",
       " 'hubby',\n",
       " 'hug',\n",
       " 'huge',\n",
       " 'hun',\n",
       " 'hungry',\n",
       " 'hurt',\n",
       " 'husband',\n",
       " 'ice',\n",
       " 'id',\n",
       " 'idea',\n",
       " 'idk',\n",
       " 'ill',\n",
       " 'im',\n",
       " 'indeed',\n",
       " 'info',\n",
       " 'inside',\n",
       " 'instead',\n",
       " 'interesting',\n",
       " 'internet',\n",
       " 'interview',\n",
       " 'iphone',\n",
       " 'ipod',\n",
       " 'isnt',\n",
       " 'issue',\n",
       " 'itll',\n",
       " 'ive',\n",
       " 'jealous',\n",
       " 'job',\n",
       " 'join',\n",
       " 'joke',\n",
       " 'jonas',\n",
       " 'joy',\n",
       " 'june',\n",
       " 'jus',\n",
       " 'keep',\n",
       " 'kid',\n",
       " 'kill',\n",
       " 'killing',\n",
       " 'kind',\n",
       " 'kinda',\n",
       " 'knew',\n",
       " 'know',\n",
       " 'la',\n",
       " 'lady',\n",
       " 'lame',\n",
       " 'laptop',\n",
       " 'last',\n",
       " 'late',\n",
       " 'later',\n",
       " 'laugh',\n",
       " 'laundry',\n",
       " 'lazy',\n",
       " 'le',\n",
       " 'learn',\n",
       " 'learning',\n",
       " 'least',\n",
       " 'leave',\n",
       " 'leaving',\n",
       " 'left',\n",
       " 'leg',\n",
       " 'let',\n",
       " 'library',\n",
       " 'life',\n",
       " 'light',\n",
       " 'like',\n",
       " 'liked',\n",
       " 'lil',\n",
       " 'line',\n",
       " 'link',\n",
       " 'list',\n",
       " 'listen',\n",
       " 'listening',\n",
       " 'little',\n",
       " 'live',\n",
       " 'living',\n",
       " 'lmao',\n",
       " 'load',\n",
       " 'lol',\n",
       " 'london',\n",
       " 'lonely',\n",
       " 'long',\n",
       " 'longer',\n",
       " 'look',\n",
       " 'looked',\n",
       " 'looking',\n",
       " 'lose',\n",
       " 'lost',\n",
       " 'lot',\n",
       " 'love',\n",
       " 'loved',\n",
       " 'lovely',\n",
       " 'loving',\n",
       " 'lt3',\n",
       " 'luck',\n",
       " 'lucky',\n",
       " 'lunch',\n",
       " 'luv',\n",
       " 'mac',\n",
       " 'mad',\n",
       " 'made',\n",
       " 'make',\n",
       " 'making',\n",
       " 'man',\n",
       " 'many',\n",
       " 'mark',\n",
       " 'match',\n",
       " 'mate',\n",
       " 'math',\n",
       " 'matter',\n",
       " 'may',\n",
       " 'maybe',\n",
       " 'mcfly',\n",
       " 'mean',\n",
       " 'meant',\n",
       " 'meet',\n",
       " 'meeting',\n",
       " 'message',\n",
       " 'met',\n",
       " 'might',\n",
       " 'mile',\n",
       " 'miley',\n",
       " 'milk',\n",
       " 'min',\n",
       " 'mind',\n",
       " 'mine',\n",
       " 'minute',\n",
       " 'miss',\n",
       " 'missed',\n",
       " 'missing',\n",
       " 'mmm',\n",
       " 'mom',\n",
       " 'moment',\n",
       " 'mommy',\n",
       " 'monday',\n",
       " 'money',\n",
       " 'montana',\n",
       " 'month',\n",
       " 'mood',\n",
       " 'morning',\n",
       " 'mother',\n",
       " 'move',\n",
       " 'movie',\n",
       " 'moving',\n",
       " 'mr',\n",
       " 'much',\n",
       " 'mum',\n",
       " 'music',\n",
       " 'must',\n",
       " 'myspace',\n",
       " 'na',\n",
       " 'nah',\n",
       " 'name',\n",
       " 'nap',\n",
       " 'near',\n",
       " 'nearly',\n",
       " 'need',\n",
       " 'needed',\n",
       " 'never',\n",
       " 'new',\n",
       " 'news',\n",
       " 'next',\n",
       " 'nice',\n",
       " 'night',\n",
       " 'nite',\n",
       " 'nobody',\n",
       " 'none',\n",
       " 'nope',\n",
       " 'nose',\n",
       " 'not',\n",
       " 'note',\n",
       " 'nothing',\n",
       " 'number',\n",
       " 'office',\n",
       " 'officially',\n",
       " 'often',\n",
       " 'oh',\n",
       " 'ok',\n",
       " 'okay',\n",
       " 'old',\n",
       " 'omg',\n",
       " 'one',\n",
       " 'online',\n",
       " 'open',\n",
       " 'order',\n",
       " 'others',\n",
       " 'ouch',\n",
       " 'outside',\n",
       " 'packing',\n",
       " 'page',\n",
       " 'pain',\n",
       " 'paper',\n",
       " 'parent',\n",
       " 'park',\n",
       " 'part',\n",
       " 'party',\n",
       " 'pas',\n",
       " 'passed',\n",
       " 'past',\n",
       " 'pay',\n",
       " 'pc',\n",
       " 'peace',\n",
       " 'people',\n",
       " 'perfect',\n",
       " 'person',\n",
       " 'phone',\n",
       " 'photo',\n",
       " 'pic',\n",
       " 'pick',\n",
       " 'picture',\n",
       " 'piece',\n",
       " 'pink',\n",
       " 'pizza',\n",
       " 'place',\n",
       " 'plan',\n",
       " 'play',\n",
       " 'played',\n",
       " 'playing',\n",
       " 'please',\n",
       " 'plus',\n",
       " 'point',\n",
       " 'poor',\n",
       " 'possible',\n",
       " 'post',\n",
       " 'posted',\n",
       " 'power',\n",
       " 'ppl',\n",
       " 'pretty',\n",
       " 'probably',\n",
       " 'problem',\n",
       " 'profile',\n",
       " 'project',\n",
       " 'prom',\n",
       " 'proud',\n",
       " 'puppy',\n",
       " 'put',\n",
       " 'question',\n",
       " 'quick',\n",
       " 'quiet',\n",
       " 'quite',\n",
       " 'race',\n",
       " 'radio',\n",
       " 'rain',\n",
       " 'raining',\n",
       " 'rainy',\n",
       " 'random',\n",
       " 'rather',\n",
       " 'read',\n",
       " 'reading',\n",
       " 'ready',\n",
       " 'real',\n",
       " 'realized',\n",
       " 'really',\n",
       " 'reason',\n",
       " 'record',\n",
       " 'red',\n",
       " 'relaxing',\n",
       " 'remember',\n",
       " 'reply',\n",
       " 'rest',\n",
       " 'result',\n",
       " 'revision',\n",
       " 'ride',\n",
       " 'right',\n",
       " 'rip',\n",
       " 'road',\n",
       " 'rock',\n",
       " 'room',\n",
       " 'round',\n",
       " 'run',\n",
       " 'running',\n",
       " 'sad',\n",
       " 'sadly',\n",
       " 'safe',\n",
       " 'said',\n",
       " 'sale',\n",
       " 'sat',\n",
       " 'saturday',\n",
       " 'save',\n",
       " 'saw',\n",
       " 'say',\n",
       " 'saying',\n",
       " 'scared',\n",
       " 'scary',\n",
       " 'school',\n",
       " 'screen',\n",
       " 'season',\n",
       " 'second',\n",
       " 'see',\n",
       " 'seeing',\n",
       " 'seem',\n",
       " 'seems',\n",
       " 'seen',\n",
       " 'self',\n",
       " 'send',\n",
       " 'sent',\n",
       " 'series',\n",
       " 'serious',\n",
       " 'seriously',\n",
       " 'service',\n",
       " 'set',\n",
       " 'sexy',\n",
       " 'shall',\n",
       " 'shame',\n",
       " 'share',\n",
       " 'shes',\n",
       " 'shining',\n",
       " 'shirt',\n",
       " 'shit',\n",
       " 'shoe',\n",
       " 'shoot',\n",
       " 'shop',\n",
       " 'shopping',\n",
       " 'short',\n",
       " 'shot',\n",
       " 'shouldnt',\n",
       " 'show',\n",
       " 'shower',\n",
       " 'si',\n",
       " 'sick',\n",
       " 'side',\n",
       " 'sigh',\n",
       " 'sign',\n",
       " 'silly',\n",
       " 'since',\n",
       " 'sing',\n",
       " 'singing',\n",
       " 'single',\n",
       " 'sister',\n",
       " 'sit',\n",
       " 'site',\n",
       " 'sitting',\n",
       " 'sky',\n",
       " 'sleep',\n",
       " 'sleeping',\n",
       " 'sleepy',\n",
       " 'slept',\n",
       " 'slow',\n",
       " 'small',\n",
       " 'smell',\n",
       " 'smile',\n",
       " 'snow',\n",
       " 'someone',\n",
       " 'something',\n",
       " 'sometimes',\n",
       " 'somewhere',\n",
       " 'son',\n",
       " 'song',\n",
       " 'soo',\n",
       " 'soon',\n",
       " 'sooo',\n",
       " 'soooo',\n",
       " 'sore',\n",
       " 'sorry',\n",
       " 'sort',\n",
       " 'sound',\n",
       " 'special',\n",
       " 'spend',\n",
       " 'spending',\n",
       " 'spent',\n",
       " 'spring',\n",
       " 'star',\n",
       " 'starbucks',\n",
       " 'start',\n",
       " 'started',\n",
       " 'starting',\n",
       " 'state',\n",
       " 'stay',\n",
       " 'staying',\n",
       " 'still',\n",
       " 'stomach',\n",
       " 'stop',\n",
       " 'stopped',\n",
       " 'store',\n",
       " 'story',\n",
       " 'street',\n",
       " 'stuck',\n",
       " 'study',\n",
       " 'studying',\n",
       " 'stuff',\n",
       " 'stupid',\n",
       " 'suck',\n",
       " 'summer',\n",
       " 'sun',\n",
       " 'sunday',\n",
       " 'sunny',\n",
       " 'sunshine',\n",
       " 'super',\n",
       " 'support',\n",
       " 'supposed',\n",
       " 'sure',\n",
       " 'sweet',\n",
       " 'swine',\n",
       " 'ta',\n",
       " 'take',\n",
       " 'taken',\n",
       " 'taking',\n",
       " 'talk',\n",
       " 'talking',\n",
       " 'taste',\n",
       " 'tea',\n",
       " 'team',\n",
       " 'tell',\n",
       " 'terrible',\n",
       " 'test',\n",
       " 'text',\n",
       " 'thank',\n",
       " 'thanks',\n",
       " 'thats',\n",
       " 'there',\n",
       " 'theyre',\n",
       " 'thing',\n",
       " 'think',\n",
       " 'thinking',\n",
       " 'tho',\n",
       " 'though',\n",
       " 'thought',\n",
       " 'three',\n",
       " 'throat',\n",
       " 'thursday',\n",
       " 'thx',\n",
       " 'ticket',\n",
       " 'til',\n",
       " 'till',\n",
       " 'time',\n",
       " 'tip',\n",
       " 'tired',\n",
       " 'today',\n",
       " 'together',\n",
       " 'told',\n",
       " 'tom',\n",
       " 'tomorrow',\n",
       " 'tonight',\n",
       " 'took',\n",
       " 'top',\n",
       " 'totally',\n",
       " 'touch',\n",
       " 'tour',\n",
       " 'town',\n",
       " 'track',\n",
       " 'train',\n",
       " 'tree',\n",
       " 'tried',\n",
       " 'trip',\n",
       " 'trouble',\n",
       " 'true',\n",
       " 'try',\n",
       " 'trying',\n",
       " 'tuesday',\n",
       " 'tummy',\n",
       " 'turn',\n",
       " 'turned',\n",
       " 'tv',\n",
       " 'tweet',\n",
       " 'tweetdeck',\n",
       " 'tweetie',\n",
       " 'tweeting',\n",
       " 'twilight',\n",
       " 'twitter',\n",
       " 'twittering',\n",
       " 'two',\n",
       " 'type',\n",
       " 'ugh',\n",
       " 'uk',\n",
       " 'understand',\n",
       " 'unfortunately',\n",
       " 'uni',\n",
       " 'update',\n",
       " 'upload',\n",
       " 'upset',\n",
       " 'ur',\n",
       " 'use',\n",
       " 'used',\n",
       " 'using',\n",
       " 'usual',\n",
       " 'usually',\n",
       " 'vacation',\n",
       " 'vega',\n",
       " 'version',\n",
       " 'via',\n",
       " 'video',\n",
       " 'visit',\n",
       " 'voice',\n",
       " 'wait',\n",
       " 'waiting',\n",
       " 'wake',\n",
       " 'waking',\n",
       " 'walk',\n",
       " 'walking',\n",
       " 'wan',\n",
       " 'want',\n",
       " 'wanted',\n",
       " 'war',\n",
       " 'warm',\n",
       " 'wasnt',\n",
       " 'watch',\n",
       " 'watched',\n",
       " 'watching',\n",
       " 'water',\n",
       " 'way',\n",
       " 'wear',\n",
       " 'wearing',\n",
       " 'weather',\n",
       " 'web',\n",
       " 'website',\n",
       " 'wedding',\n",
       " 'wednesday',\n",
       " 'week',\n",
       " 'weekend',\n",
       " 'weird',\n",
       " 'welcome',\n",
       " 'well',\n",
       " 'went',\n",
       " 'whatever',\n",
       " 'whats',\n",
       " 'white',\n",
       " 'who',\n",
       " 'whole',\n",
       " 'wife',\n",
       " 'win',\n",
       " 'window',\n",
       " 'wine',\n",
       " 'wish',\n",
       " 'wishing',\n",
       " 'wit',\n",
       " 'without',\n",
       " 'woke',\n",
       " 'wolverine',\n",
       " 'woman',\n",
       " 'wonder',\n",
       " 'wonderful',\n",
       " 'wondering',\n",
       " 'wont',\n",
       " 'woo',\n",
       " 'word',\n",
       " 'work',\n",
       " 'worked',\n",
       " 'working',\n",
       " 'world',\n",
       " 'worried',\n",
       " 'worry',\n",
       " 'worse',\n",
       " 'worst',\n",
       " 'worth',\n",
       " 'would',\n",
       " 'wouldnt',\n",
       " 'wow',\n",
       " 'write',\n",
       " 'writing',\n",
       " 'wrong',\n",
       " 'wtf',\n",
       " 'xd',\n",
       " 'xoxo',\n",
       " 'xx',\n",
       " 'xxx',\n",
       " 'ya',\n",
       " 'yall',\n",
       " 'yay',\n",
       " 'yea',\n",
       " 'yeah',\n",
       " 'year',\n",
       " 'yep',\n",
       " 'yes',\n",
       " 'yesterday',\n",
       " 'yet',\n",
       " 'yo',\n",
       " 'youll',\n",
       " 'youre',\n",
       " 'youtube',\n",
       " 'youve',\n",
       " 'yr',\n",
       " 'yum',\n",
       " 'yummy',\n",
       " 'yup']"
      ]
     },
     "execution_count": 710,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feature = bow.get_feature_names()\n",
    "feature"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding sparsity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "941221"
      ]
     },
     "execution_count": 711,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text_bow.nnz  # Checking the amount of non zero occurences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4706105"
      ]
     },
     "execution_count": 712,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Checking the sparsity \n",
    "\n",
    "sparsity = (100.0 * text_bow.nnz / (text_bow.shape[0] * text_bow.shape[1]))\n",
    "\n",
    "sparsity  \n",
    "\n",
    "# This basically compares the number of non zero texts and the total number of texts"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### TERM FREQUENCY"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "tfidf_vectorizer = TfidfVectorizer(max_features=1000)\n",
    "text_tfidf = tfidf_vectorizer.fit_transform(df_pp['clean_text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<200000x1000 sparse matrix of type '<class 'numpy.float64'>'\n",
       "\twith 941221 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 715,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text_tfidf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BONUS!!! Model preparation using ngrams"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### N-GRAMS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000\n"
     ]
    }
   ],
   "source": [
    "ngrams = CountVectorizer(max_features = 1000, ngram_range = (1, 3)).fit(df_pp['clean_text'])\n",
    "print(len(ngrams.vocabulary_))\n",
    "\n",
    "text_ngrams = ngrams.transform(df_pp['clean_text'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<200000x1000 sparse matrix of type '<class 'numpy.int64'>'\n",
       "\twith 971332 stored elements in Compressed Sparse Row format>"
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "text_ngrams"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BOW Modelling and using the given algorithms in them"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### SPLITTING THE DATASET"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = text_bow\n",
    "y = df_pp['Emotions_class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_train,text_test,class_train,class_test = train_test_split(x,y,test_size = 0.3, random_state =101)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(140000, 1000) (140000,)\n",
      "(60000, 1000) (60000,)\n"
     ]
    }
   ],
   "source": [
    "print(text_train.shape, class_train.shape)\n",
    "\n",
    "print(text_test.shape, class_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "### (1) Logistic Regression for BOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodel = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 724,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel.fit(text_train,class_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = logmodel.predict(text_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using logistic regression: 74.62 %\n"
     ]
    }
   ],
   "source": [
    "ACC = accuracy_score(pred,class_test)\n",
    "\n",
    "print('Accuracy using logistic regression:', ACC*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  (2) Naive Bayes for BOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 728,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NB = MultinomialNB()\n",
    "\n",
    "NB.fit(text_train,class_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {},
   "outputs": [],
   "source": [
    "predNB = NB.predict(text_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using naive_bayes : 73.835 %\n"
     ]
    }
   ],
   "source": [
    "ACCNB = accuracy_score(predNB,class_test)\n",
    "\n",
    "print('Accuracy using naive_bayes :', ACCNB*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (3) KNN algorithm for BOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "metadata": {},
   "outputs": [],
   "source": [
    "# from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "metadata": {},
   "outputs": [],
   "source": [
    "# knn = KNeighborsClassifier(n_neighbors = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
       "                     metric_params=None, n_jobs=None, n_neighbors=3, p=2,\n",
       "                     weights='uniform')"
      ]
     },
     "execution_count": 340,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# knn.fit(text_train, class_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predknn = knn.predict(text_test)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using knn : 67.70666666666668 %\n"
     ]
    }
   ],
   "source": [
    "# ACCknn = accuracy_score(predknn,class_test)\n",
    "\n",
    "# print('Accuracy using knn :', ACCknn*100,'%')\n",
    "\n",
    "\n",
    "# # since the code takes a long time to run, the accuracy score is printed here. the value is 67.7%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Since knn takes a long time to run, i have commented out the knn classifier alone since it gives very less accuracy anyways"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (4) Decision tree classifier for BOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtree = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 733,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtree.fit(text_train,class_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtpred = dtree.predict(text_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using decision trees : 68.08 %\n"
     ]
    }
   ],
   "source": [
    "dtACC = accuracy_score(dtpred,class_test)\n",
    "\n",
    "print('Accuracy using decision trees :', dtACC*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (5) Random Forest Classifier for BOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfc = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=10,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 738,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc.fit(text_train,class_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfcpred = rfc.predict(text_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using decision trees : 71.63000000000001 %\n"
     ]
    }
   ],
   "source": [
    "rfcACC = accuracy_score(rfcpred,class_test)\n",
    "\n",
    "print('Accuracy using decision trees :', rfcACC*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (6) Support Vector Machines for BOW"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 742,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LinearSVC(random_state=0, tol=1e-5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
       "          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "          multi_class='ovr', penalty='l2', random_state=0, tol=1e-05,\n",
       "          verbose=0)"
      ]
     },
     "execution_count": 743,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(text_train,class_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 744,
   "metadata": {},
   "outputs": [],
   "source": [
    "clfpred = clf.predict(text_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 745,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using support vector machines : 74.55666666666667 %\n"
     ]
    }
   ],
   "source": [
    "clfACC = accuracy_score(clfpred,class_test)\n",
    "\n",
    "print('Accuracy using support vector machines :', clfACC*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## TFIDF Model preparation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 746,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 747,
   "metadata": {},
   "outputs": [],
   "source": [
    "x1 = text_tfidf\n",
    "y1 = df_pp['Emotions_class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 748,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_train1,text_test1,class_train1,class_test1 = train_test_split(x1,y1,test_size = 0.3, random_state =101)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 749,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(140000, 1000) (140000,)\n",
      "(60000, 1000) (60000,)\n"
     ]
    }
   ],
   "source": [
    "print(text_train1.shape, class_train1.shape)\n",
    "\n",
    "print(text_test1.shape, class_test1.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (1) LOGISTIC REGRESSION FOR Tfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 750,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 751,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodel1 = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 752,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 752,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel1.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 753,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1 = logmodel1.predict(text_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 754,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using logistic regression (tfidf): 74.64666666666666 %\n"
     ]
    }
   ],
   "source": [
    "ACC1 = accuracy_score(pred1,class_test1)\n",
    "\n",
    "print('Accuracy using logistic regression (tfidf):', ACC1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  (2) Naive Bayes for tfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 755,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import MultinomialNB"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 756,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 756,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NB1 = MultinomialNB()\n",
    "\n",
    "NB1.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 757,
   "metadata": {},
   "outputs": [],
   "source": [
    "predNB1 = NB1.predict(text_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 758,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using naive_bayes (tfidf): 73.675 %\n"
     ]
    }
   ],
   "source": [
    "ACCNB1 = accuracy_score(predNB1,class_test1)\n",
    "\n",
    "print('Accuracy using naive_bayes (tfidf):', ACCNB1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (3) KNN algorithm for tfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#from sklearn.neighbors import KNeighborsClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#knn1 = KNeighborsClassifier(n_neighbors = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#knn1.fit(text_train1, class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#predknn1 = knn1.predict(text_test1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#ACCknn1 = accuracy_score(predknn1,class_test1)\n",
    "\n",
    "#print('Accuracy using knn for tfidf :', ACCknn1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (4) Decision tree classifier for tfidf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 759,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtree1 = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 761,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtree1.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtpred1 = dtree1.predict(text_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using decision trees for tfidf : 68.51833333333333 %\n"
     ]
    }
   ],
   "source": [
    "dtACC1 = accuracy_score(dtpred1,class_test1)\n",
    "\n",
    "print('Accuracy using decision trees for tfidf :', dtACC1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (5) Random Forest Classifier for tfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 764,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 765,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfc1 = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 766,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, n_estimators=10,\n",
       "                       n_jobs=None, oob_score=False, random_state=None,\n",
       "                       verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 766,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc1.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "metadata": {},
   "outputs": [],
   "source": [
    "rfcpred1 = rfc1.predict(text_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 768,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using decision trees : 72.425 %\n"
     ]
    }
   ],
   "source": [
    "rfcACC1 = accuracy_score(rfcpred1,class_test1)\n",
    "\n",
    "print('Accuracy using decision trees :', rfcACC1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (6) Support Vector Machines for tfidf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 769,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 770,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf1 = LinearSVC(random_state=0, tol=1e-5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 771,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
       "          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "          multi_class='ovr', penalty='l2', random_state=0, tol=1e-05,\n",
       "          verbose=0)"
      ]
     },
     "execution_count": 771,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "clf1.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 772,
   "metadata": {},
   "outputs": [],
   "source": [
    "clfpred1 = clf1.predict(text_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 773,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using support vector machines : 74.52499999999999 %\n"
     ]
    }
   ],
   "source": [
    "clfACC1 = accuracy_score(clfpred1,class_test1)\n",
    "\n",
    "print('Accuracy using support vector machines :', clfACC1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NGRAMS MODEL PREPARATION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 774,
   "metadata": {},
   "outputs": [],
   "source": [
    "xgram = text_ngrams\n",
    "ygram = df_pp['Emotions_class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 775,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_traingram,text_testgram,class_traingram,class_testgram = train_test_split(xgram,ygram,test_size = 0.3, random_state =101)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 776,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(140000, 1000) (140000,)\n",
      "(60000, 1000) (60000,)\n"
     ]
    }
   ],
   "source": [
    "print(text_traingram.shape, class_traingram.shape)\n",
    "\n",
    "print(text_testgram.shape, class_testgram.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using logistic regression with ngram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 777,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodelgram = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 778,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 778,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodelgram.fit(text_traingram,class_traingram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 779,
   "metadata": {},
   "outputs": [],
   "source": [
    "predgram = logmodelgram.predict(text_testgram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 780,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using logistic regression (ngram): 74.44166666666666 %\n"
     ]
    }
   ],
   "source": [
    "ACCgram = accuracy_score(predgram,class_testgram)\n",
    "\n",
    "print('Accuracy using logistic regression (ngram):', ACCgram*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Naive bayes theorem with ngram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 781,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 781,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NBgram = MultinomialNB()\n",
    "\n",
    "NBgram.fit(text_traingram,class_traingram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 782,
   "metadata": {},
   "outputs": [],
   "source": [
    "predNBgram = NBgram.predict(text_testgram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 783,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using naive_bayes (ngram): 73.74166666666667 %\n"
     ]
    }
   ],
   "source": [
    "ACCNBgram = accuracy_score(predNBgram,class_testgram)\n",
    "\n",
    "print('Accuracy using naive_bayes (ngram):', ACCNBgram*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Tree classifier with ngram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 784,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 785,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtreegram = DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 786,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(class_weight=None, criterion='gini', max_depth=None,\n",
       "                       max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort=False,\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 786,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtreegram.fit(text_traingram,class_traingram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 787,
   "metadata": {},
   "outputs": [],
   "source": [
    "dtpredgram = dtreegram.predict(text_testgram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 788,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using decision trees for ngram : 67.96833333333333 %\n"
     ]
    }
   ],
   "source": [
    "dtACCgram = accuracy_score(dtpredgram,class_testgram)\n",
    "\n",
    "print('Accuracy using decision trees for ngram :', dtACCgram*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Support vector machines with ngram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 789,
   "metadata": {},
   "outputs": [],
   "source": [
    "clfgram = LinearSVC(random_state=0, tol=1e-5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 790,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
       "          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "          multi_class='ovr', penalty='l2', random_state=0, tol=1e-05,\n",
       "          verbose=0)"
      ]
     },
     "execution_count": 790,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "clfgram.fit(text_traingram,class_traingram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 791,
   "metadata": {},
   "outputs": [],
   "source": [
    "clfpredgram = clfgram.predict(text_testgram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 792,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using support vector machines for ngrams : 74.52499999999999 %\n"
     ]
    }
   ],
   "source": [
    "clfACCgram = accuracy_score(clfpredgram,class_testgram)\n",
    "\n",
    "print('Accuracy using support vector machines for ngrams :', clfACC1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Model Implementation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "## It can be seen that model accuracy is highest value for logistic regression when used with Tfidf vectorizer."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## BONUS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Hyperparameter tuning using gridsearch CV for increasing the accuracy value of the logistic regression under tfidf vectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 793,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logmodel1 was used for fitting logistic regression in tfidf vectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 794,
   "metadata": {},
   "outputs": [],
   "source": [
    "param_grid = {'C': [0.001,0.01,0.1,10,100]}\n",
    "logmodel1= GridSearchCV(LogisticRegression(penalty='l2'), param_grid)\n",
    "gridmodel=logmodel1.fit(text_train1, class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 795,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 10}"
      ]
     },
     "execution_count": 795,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridmodel.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 796,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7467142857142857"
      ]
     },
     "execution_count": 796,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gridmodel.best_score_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 797,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7465833333333334"
      ]
     },
     "execution_count": 797,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred1cv = gridmodel.predict(text_test1)\n",
    "accuracy_score(pred1cv,class_test1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### So now we change the default value of C to 10 as it is the best parameter observed among C values. Now we implement the model again and see the accuracy.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 798,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=10, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 798,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel1 = LogisticRegression( C = 10)\n",
    "\n",
    "logmodel1.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 799,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred1 = logmodel1.predict(text_test1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 800,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using logistic regression (tfidf) after GridsearchCV : 74.65833333333333 %\n"
     ]
    }
   ],
   "source": [
    "ACC1 = accuracy_score(pred1,class_test1)\n",
    "\n",
    "print('Accuracy using logistic regression (tfidf) after GridsearchCV :', ACC1*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### It can be seen that the accuracy has been increased by 0.1%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now we are implementing tfidf vectorizer in the canadian election "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 801,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 802,
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf_vectorizer = TfidfVectorizer(max_features=1000)\n",
    "text_tfidf1 = tfidf_vectorizer.fit_transform(election_pp['clean_text_elections'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementing the model in logistic regression as it is the best performing model amongst others"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic regression for canadian election"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 803,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 804,
   "metadata": {},
   "outputs": [],
   "source": [
    "x2 = text_tfidf1\n",
    "y2 = election_pp[['sentiment_value']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 805,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodel2 = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 806,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 806,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel2.fit(text_train1,class_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 807,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred2= logmodel2.predict(x2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 808,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using logistic regression for canadian elections: 49.97655883731833 %\n"
     ]
    }
   ],
   "source": [
    "ACC2 = accuracy_score(pred2,y2)\n",
    "\n",
    "print('Accuracy using logistic regression for canadian elections:', ACC2*100,'%')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### The accuracy of the model when applied to the canadian elections data is 49.97655883731833  %"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 809,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 4, 0, ..., 4, 0, 0], dtype=int64)"
      ]
     },
     "execution_count": 809,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pred2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 810,
   "metadata": {},
   "outputs": [],
   "source": [
    "predicated_value = pd.DataFrame(pred2, columns = ['predicted_sentiment_value'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 811,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2130</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2132</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2133 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      predicted_sentiment_value\n",
       "0                             0\n",
       "1                             4\n",
       "2                             0\n",
       "3                             0\n",
       "4                             0\n",
       "...                         ...\n",
       "2128                          4\n",
       "2129                          4\n",
       "2130                          4\n",
       "2131                          0\n",
       "2132                          0\n",
       "\n",
       "[2133 rows x 1 columns]"
      ]
     },
     "execution_count": 811,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predicated_value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Now concatenating the predicted sentiment value column to the election_pp dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 812,
   "metadata": {},
   "outputs": [],
   "source": [
    "election_pp = pd.concat([election_pp,predicated_value], axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 813,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "1                                  NaN  positive   \n",
       "2                              Economy  negative   \n",
       "3                                  NaN  positive   \n",
       "4                              Economy  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \\\n",
       "0  instead suggestion agree canadian woman trust ...                0   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...                4   \n",
       "2  brantford going cost 94 billion next 4 year as...                0   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...                4   \n",
       "4  canada taxpayer sick amp tired hard earned don...                0   \n",
       "\n",
       "  political parties  predicted_sentiment_value  \n",
       "0      Conservative                          0  \n",
       "1              None                          4  \n",
       "2          liberals                          0  \n",
       "3              None                          0  \n",
       "4          liberals                          0  "
      ]
     },
     "execution_count": 813,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### MODEL IMPLEMENTATION second paragraph explanation and visualisation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Comparing the modelling results:\n",
    "\n",
    "### Now comparing the predicted sentimental value for each party and visualising which party has a better election outcome from the model above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 814,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sentiments')"
      ]
     },
     "execution_count": 814,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax1 = pd.crosstab(election_pp['political parties'],election_pp['predicted_sentiment_value']).plot(kind='bar',figsize=(10,6),color=['blue','red'],width=0.75,)\n",
    "ax1.set_title(\"Total sentiments\",fontsize=20)\n",
    "ax1.set_xlabel(\"Political Parties\",fontsize=18)\n",
    "ax1.set_ylabel(\"Sentiments\",fontsize=18) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Observing only the three parties from the above bar graph. It can be seen that from the predicted results, all the parties have negative sentiments than positive sentiments. \n",
    "\n",
    "### Even though the Conservative party has more negative sentiments; they have more positive sentiments than the other two parties. so from the predicted sentiment values, conservative party has a better election outcome than liberals and NDP."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now taking only the negative tweets for predicting the reason"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 815,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "1                                  NaN  positive   \n",
       "2                              Economy  negative   \n",
       "3                                  NaN  positive   \n",
       "4                              Economy  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \\\n",
       "0  instead suggestion agree canadian woman trust ...                0   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...                4   \n",
       "2  brantford going cost 94 billion next 4 year as...                0   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...                4   \n",
       "4  canada taxpayer sick amp tired hard earned don...                0   \n",
       "\n",
       "  political parties  predicted_sentiment_value  \n",
       "0      Conservative                          0  \n",
       "1              None                          4  \n",
       "2          liberals                          0  \n",
       "3              None                          0  \n",
       "4          liberals                          0  "
      ]
     },
     "execution_count": 815,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 816,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...</td>\n",
       "      <td>#canadavotes2019 #elxn43 #cdnpoli - facts - #b...</td>\n",
       "      <td>canadavotes2019  elxn43  cdnpoli - facts -  b...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfro...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfrom...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, facts, blas...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli fact blastfromt...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\nCanada, Don't...</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward  cdnpoli  elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada don t mak...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "2                              Economy  negative   \n",
       "4                              Economy  negative   \n",
       "5                               Others  negative   \n",
       "8                               Others  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "5  #CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...   \n",
       "8  #chooseforward #cdnpoli #elxn43\\nCanada, Don't...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "5  #canadavotes2019 #elxn43 #cdnpoli - facts - #b...   \n",
       "8  #chooseforward #cdnpoli #elxn43\\ncanada, don't...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "5   canadavotes2019  elxn43  cdnpoli - facts -  b...   \n",
       "8   chooseforward  cdnpoli  elxn43\\ncanada, don't...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "5   canadavotes2019 elxn43 cdnpoli facts blastfro...   \n",
       "8   chooseforward cdnpoli elxn43 canada don t mak...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "5  canadavotes2019 elxn43 cdnpoli facts blastfrom...   \n",
       "8  chooseforward cdnpoli elxn43 canada make ameri...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "5  [canadavotes2019, elxn43, cdnpoli, facts, blas...   \n",
       "8  [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "5  [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8  [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "5  [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8  [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \\\n",
       "0  instead suggestion agree canadian woman trust ...                0   \n",
       "2  brantford going cost 94 billion next 4 year as...                0   \n",
       "4  canada taxpayer sick amp tired hard earned don...                0   \n",
       "5  canadavotes2019 elxn43 cdnpoli fact blastfromt...                0   \n",
       "8  chooseforward cdnpoli elxn43 canada make ameri...                0   \n",
       "\n",
       "  political parties  predicted_sentiment_value  \n",
       "0      Conservative                          0  \n",
       "2          liberals                          0  \n",
       "4          liberals                          0  \n",
       "5      Conservative                          0  \n",
       "8              None                          0  "
      ]
     },
     "execution_count": 816,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets = election_pp[election_pp['sentiment'] == 'negative']\n",
    "\n",
    "neg_tweets.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 817,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Women Reproductive right and Racism', 'Economy', 'Others',\n",
       "       'Scandal', 'Tell lies', 'Privilege', 'Climate Problem',\n",
       "       'Healthcare', 'Separation', 'Healthcare and Marijuana'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 817,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets.negative_reason.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1424,
   "metadata": {},
   "outputs": [],
   "source": [
    "# neg_tweets[(neg_tweets['negative_reason'] == 'Women Reproductive right and Racism') | (neg_tweets['negative_reason'] == 'Separation')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1452,
   "metadata": {},
   "outputs": [],
   "source": [
    "# neg_tweets = neg_tweets['negative_reason'].replace(\"Separation\" == \"Women Reproductive right and Racism\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 818,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...</td>\n",
       "      <td>#canadavotes2019 #elxn43 #cdnpoli - facts - #b...</td>\n",
       "      <td>canadavotes2019  elxn43  cdnpoli - facts -  b...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfro...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfrom...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, facts, blas...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli fact blastfromt...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\nCanada, Don't...</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward  cdnpoli  elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada don t mak...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "2                              Economy  negative   \n",
       "4                              Economy  negative   \n",
       "5                               Others  negative   \n",
       "8                               Others  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "5  #CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...   \n",
       "8  #chooseforward #cdnpoli #elxn43\\nCanada, Don't...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "5  #canadavotes2019 #elxn43 #cdnpoli - facts - #b...   \n",
       "8  #chooseforward #cdnpoli #elxn43\\ncanada, don't...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "5   canadavotes2019  elxn43  cdnpoli - facts -  b...   \n",
       "8   chooseforward  cdnpoli  elxn43\\ncanada, don't...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "5   canadavotes2019 elxn43 cdnpoli facts blastfro...   \n",
       "8   chooseforward cdnpoli elxn43 canada don t mak...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "5  canadavotes2019 elxn43 cdnpoli facts blastfrom...   \n",
       "8  chooseforward cdnpoli elxn43 canada make ameri...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "5  [canadavotes2019, elxn43, cdnpoli, facts, blas...   \n",
       "8  [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "5  [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8  [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "5  [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8  [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \\\n",
       "0  instead suggestion agree canadian woman trust ...                0   \n",
       "2  brantford going cost 94 billion next 4 year as...                0   \n",
       "4  canada taxpayer sick amp tired hard earned don...                0   \n",
       "5  canadavotes2019 elxn43 cdnpoli fact blastfromt...                0   \n",
       "8  chooseforward cdnpoli elxn43 canada make ameri...                0   \n",
       "\n",
       "  political parties  predicted_sentiment_value  \n",
       "0      Conservative                          0  \n",
       "2          liberals                          0  \n",
       "4          liberals                          0  \n",
       "5      Conservative                          0  \n",
       "8              None                          0  "
      ]
     },
     "execution_count": 818,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Grouping of similar categories"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Have grouped Women Reproductive right and Racism,seperation and privilege together as they were more related to freedom, rights and privelege of a person.\n",
    "\n",
    "### Scandal and tell lies are grouped together as they are related to corruption and fraud.\n",
    "\n",
    "### Heahtcare and marijuana have been grouped under healthcare as they both come under health\n",
    "\n",
    "### Climate changes and economy were grouped under others as they are correlated with each other."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 819,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets = neg_tweets['negative_reason'].replace(to_replace = ['Separation','Privilege'], value = 'Women Reproductive right and Racism')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 820,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets = neg_tweets.replace(to_replace = ['Climate Problem','Economy'], value = 'Others')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 821,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets = neg_tweets.replace(to_replace = ['Tell lies'], value = 'Scandal')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 822,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets = neg_tweets.replace(to_replace = ['Healthcare and Marijuana'], value = 'Healthcare')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 823,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Women Reproductive right and Racism', 'Others', 'Scandal',\n",
       "       'Healthcare'], dtype=object)"
      ]
     },
     "execution_count": 823,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets.unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now neg_tweets contains only four groups"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 824,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets1 = election_pp[election_pp['sentiment'] == 'negative']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 825,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...</td>\n",
       "      <td>#canadavotes2019 #elxn43 #cdnpoli - facts - #b...</td>\n",
       "      <td>canadavotes2019  elxn43  cdnpoli - facts -  b...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfro...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfrom...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, facts, blas...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli fact blastfromt...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\nCanada, Don't...</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward  cdnpoli  elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada don t mak...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2125</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>You can’t be a supervillain of an election if ...</td>\n",
       "      <td>you can’t be a supervillain of an election if ...</td>\n",
       "      <td>you can’t be a supervillain of an election if ...</td>\n",
       "      <td>you can t be a supervillain of an election if ...</td>\n",
       "      <td>supervillain election failed jobs elxn43</td>\n",
       "      <td>[supervillain, election, failed, jobs, elxn43]</td>\n",
       "      <td>[supervillain, elect, fail, job, elxn43]</td>\n",
       "      <td>[supervillain, election, failed, job, elxn43]</td>\n",
       "      <td>supervillain election failed job elxn43</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2126</td>\n",
       "      <td>Climate Problem</td>\n",
       "      <td>negative</td>\n",
       "      <td>You care about limiting #ClimateChange and are...</td>\n",
       "      <td>you care about limiting #climatechange and are...</td>\n",
       "      <td>you care about limiting  climatechange and are...</td>\n",
       "      <td>you care about limiting climatechange and are ...</td>\n",
       "      <td>care limiting climatechange wondering party vo...</td>\n",
       "      <td>[care, limiting, climatechange, wondering, par...</td>\n",
       "      <td>[care, limit, climatechang, wonder, parti, vot...</td>\n",
       "      <td>[care, limiting, climatechange, wondering, par...</td>\n",
       "      <td>care limiting climatechange wondering party vo...</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>negative</td>\n",
       "      <td>You know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>[know, good, enough, job, smear, campaign, rig...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>negative</td>\n",
       "      <td>You missed the comment. Deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment deflecting the issue do...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>[miss, comment, deflect, issu, answer, best, r...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>Yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup not going to reopen the abortion debate el...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>[yup, go, reopen, abort, debat, elxn43, scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1006 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                          negative_reason sentiment  \\\n",
       "0     Women Reproductive right and Racism  negative   \n",
       "2                                 Economy  negative   \n",
       "4                                 Economy  negative   \n",
       "5                                  Others  negative   \n",
       "8                                  Others  negative   \n",
       "...                                   ...       ...   \n",
       "2125                               Others  negative   \n",
       "2126                      Climate Problem  negative   \n",
       "2128                              Scandal  negative   \n",
       "2129                              Scandal  negative   \n",
       "2131  Women Reproductive right and Racism  negative   \n",
       "\n",
       "                                                decoded  \\\n",
       "0     @RosieBarton So instead of your suggestion, ho...   \n",
       "2     #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "4     #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "5     #CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...   \n",
       "8     #chooseforward #cdnpoli #elxn43\\nCanada, Don't...   \n",
       "...                                                 ...   \n",
       "2125  You can’t be a supervillain of an election if ...   \n",
       "2126  You care about limiting #ClimateChange and are...   \n",
       "2128  You know he was doing a good enough job smeari...   \n",
       "2129  You missed the comment. Deflecting the issue d...   \n",
       "2131  Yup...not going to reopen the abortion debate....   \n",
       "\n",
       "                                        lower_case_text  \\\n",
       "0     @rosiebarton so instead of your suggestion, ho...   \n",
       "2     #brantford it's going to cost you $94 billion ...   \n",
       "4     #canada #taxpayers are sick &amp; tired of hav...   \n",
       "5     #canadavotes2019 #elxn43 #cdnpoli - facts - #b...   \n",
       "8     #chooseforward #cdnpoli #elxn43\\ncanada, don't...   \n",
       "...                                                 ...   \n",
       "2125  you can’t be a supervillain of an election if ...   \n",
       "2126  you care about limiting #climatechange and are...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "\n",
       "                          without any urls and hashtags  \\\n",
       "0       so instead of your suggestion, how about we ...   \n",
       "2      brantford it's going to cost you $94 billion ...   \n",
       "4      canada  taxpayers are sick &amp; tired of hav...   \n",
       "5      canadavotes2019  elxn43  cdnpoli - facts -  b...   \n",
       "8      chooseforward  cdnpoli  elxn43\\ncanada, don't...   \n",
       "...                                                 ...   \n",
       "2125  you can’t be a supervillain of an election if ...   \n",
       "2126  you care about limiting  climatechange and are...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "\n",
       "                without any urls and hashtags and puncs  \\\n",
       "0      so instead of your suggestion how about we ag...   \n",
       "2      brantford it s going to cost you 94 billion f...   \n",
       "4      canada taxpayers are sick amp tired of having...   \n",
       "5      canadavotes2019 elxn43 cdnpoli facts blastfro...   \n",
       "8      chooseforward cdnpoli elxn43 canada don t mak...   \n",
       "...                                                 ...   \n",
       "2125  you can t be a supervillain of an election if ...   \n",
       "2126  you care about limiting climatechange and are ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment deflecting the issue do...   \n",
       "2131  yup not going to reopen the abortion debate el...   \n",
       "\n",
       "          without any urls,hashtags,puncs and stopwords  \\\n",
       "0     instead suggestion agree canadian women trust ...   \n",
       "2     brantford going cost 94 billion next 4 years a...   \n",
       "4     canada taxpayers sick amp tired hard earned do...   \n",
       "5     canadavotes2019 elxn43 cdnpoli facts blastfrom...   \n",
       "8     chooseforward cdnpoli elxn43 canada make ameri...   \n",
       "...                                                 ...   \n",
       "2125           supervillain election failed jobs elxn43   \n",
       "2126  care limiting climatechange wondering party vo...   \n",
       "2128  know good enough job smearing campaign right c...   \n",
       "2129  missed comment deflecting issue answer best re...   \n",
       "2131  yup going reopen abortion debate elxn43 scheer...   \n",
       "\n",
       "                                     NLTK  tokenization  \\\n",
       "0     [instead, suggestion, agree, canadian, women, ...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4     [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "5     [canadavotes2019, elxn43, cdnpoli, facts, blas...   \n",
       "8     [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "...                                                 ...   \n",
       "2125     [supervillain, election, failed, jobs, elxn43]   \n",
       "2126  [care, limiting, climatechange, wondering, par...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "\n",
       "                                                Stemmed  \\\n",
       "0     [instead, suggest, agre, canadian, women, trus...   \n",
       "2     [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "4     [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "5     [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8     [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "...                                                 ...   \n",
       "2125           [supervillain, elect, fail, job, elxn43]   \n",
       "2126  [care, limit, climatechang, wonder, parti, vot...   \n",
       "2128  [know, good, enough, job, smear, campaign, rig...   \n",
       "2129  [miss, comment, deflect, issu, answer, best, r...   \n",
       "2131  [yup, go, reopen, abort, debat, elxn43, scheer...   \n",
       "\n",
       "                                             Lemmatized  \\\n",
       "0     [instead, suggestion, agree, canadian, woman, ...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4     [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "5     [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8     [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "...                                                 ...   \n",
       "2125      [supervillain, election, failed, job, elxn43]   \n",
       "2126  [care, limiting, climatechange, wondering, par...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "\n",
       "                                   clean_text_elections  sentiment_value  \\\n",
       "0     instead suggestion agree canadian woman trust ...                0   \n",
       "2     brantford going cost 94 billion next 4 year as...                0   \n",
       "4     canada taxpayer sick amp tired hard earned don...                0   \n",
       "5     canadavotes2019 elxn43 cdnpoli fact blastfromt...                0   \n",
       "8     chooseforward cdnpoli elxn43 canada make ameri...                0   \n",
       "...                                                 ...              ...   \n",
       "2125            supervillain election failed job elxn43                0   \n",
       "2126  care limiting climatechange wondering party vo...                0   \n",
       "2128  know good enough job smearing campaign right c...                0   \n",
       "2129  missed comment deflecting issue answer best re...                0   \n",
       "2131  yup going reopen abortion debate elxn43 scheer...                0   \n",
       "\n",
       "     political parties  predicted_sentiment_value  \n",
       "0         Conservative                          0  \n",
       "2             liberals                          0  \n",
       "4             liberals                          0  \n",
       "5         Conservative                          0  \n",
       "8                 None                          0  \n",
       "...                ...                        ...  \n",
       "2125              None                          0  \n",
       "2126              None                          4  \n",
       "2128      Conservative                          4  \n",
       "2129      Conservative                          4  \n",
       "2131      Conservative                          0  \n",
       "\n",
       "[1006 rows x 14 columns]"
      ]
     },
     "execution_count": 825,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 826,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets = pd.DataFrame(neg_tweets)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 827,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Changed column name from negative reason to grouped negative reason\n",
    "neg_tweets =  neg_tweets.rename(columns = {\"negative_reason\": \"predicted_negative_reason\"})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 828,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets1 = pd.concat([neg_tweets,neg_tweets1], axis =1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 829,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets1 = neg_tweets1.drop(['negative_reason'], axis =1)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 830,
   "metadata": {},
   "outputs": [],
   "source": [
    "neg_tweets1 = neg_tweets1.rename(columns = {0: 'grouped_negative_reason'})\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 831,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>predicted_negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...</td>\n",
       "      <td>#canadavotes2019 #elxn43 #cdnpoli - facts - #b...</td>\n",
       "      <td>canadavotes2019  elxn43  cdnpoli - facts -  b...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfro...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli facts blastfrom...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, facts, blas...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>[canadavotes2019, elxn43, cdnpoli, fact, blast...</td>\n",
       "      <td>canadavotes2019 elxn43 cdnpoli fact blastfromt...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\nCanada, Don't...</td>\n",
       "      <td>#chooseforward #cdnpoli #elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward  cdnpoli  elxn43\\ncanada, don't...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada don t mak...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>[chooseforward, cdnpoli, elxn43, canada, make,...</td>\n",
       "      <td>chooseforward cdnpoli elxn43 canada make ameri...</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2125</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>You can’t be a supervillain of an election if ...</td>\n",
       "      <td>you can’t be a supervillain of an election if ...</td>\n",
       "      <td>you can’t be a supervillain of an election if ...</td>\n",
       "      <td>you can t be a supervillain of an election if ...</td>\n",
       "      <td>supervillain election failed jobs elxn43</td>\n",
       "      <td>[supervillain, election, failed, jobs, elxn43]</td>\n",
       "      <td>[supervillain, elect, fail, job, elxn43]</td>\n",
       "      <td>[supervillain, election, failed, job, elxn43]</td>\n",
       "      <td>supervillain election failed job elxn43</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2126</td>\n",
       "      <td>Others</td>\n",
       "      <td>negative</td>\n",
       "      <td>You care about limiting #ClimateChange and are...</td>\n",
       "      <td>you care about limiting #climatechange and are...</td>\n",
       "      <td>you care about limiting  climatechange and are...</td>\n",
       "      <td>you care about limiting climatechange and are ...</td>\n",
       "      <td>care limiting climatechange wondering party vo...</td>\n",
       "      <td>[care, limiting, climatechange, wondering, par...</td>\n",
       "      <td>[care, limit, climatechang, wonder, parti, vot...</td>\n",
       "      <td>[care, limiting, climatechange, wondering, par...</td>\n",
       "      <td>care limiting climatechange wondering party vo...</td>\n",
       "      <td>0</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2128</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>negative</td>\n",
       "      <td>You know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>you know he was doing a good enough job smeari...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>[know, good, enough, job, smear, campaign, rig...</td>\n",
       "      <td>[know, good, enough, job, smearing, campaign, ...</td>\n",
       "      <td>know good enough job smearing campaign right c...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2129</td>\n",
       "      <td>Scandal</td>\n",
       "      <td>negative</td>\n",
       "      <td>You missed the comment. Deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment. deflecting the issue d...</td>\n",
       "      <td>you missed the comment deflecting the issue do...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>[miss, comment, deflect, issu, answer, best, r...</td>\n",
       "      <td>[missed, comment, deflecting, issue, answer, b...</td>\n",
       "      <td>missed comment deflecting issue answer best re...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2131</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>Yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup...not going to reopen the abortion debate....</td>\n",
       "      <td>yup not going to reopen the abortion debate el...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>[yup, go, reopen, abort, debat, elxn43, scheer...</td>\n",
       "      <td>[yup, going, reopen, abortion, debate, elxn43,...</td>\n",
       "      <td>yup going reopen abortion debate elxn43 scheer...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1006 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                predicted_negative_reason sentiment  \\\n",
       "0     Women Reproductive right and Racism  negative   \n",
       "2                                  Others  negative   \n",
       "4                                  Others  negative   \n",
       "5                                  Others  negative   \n",
       "8                                  Others  negative   \n",
       "...                                   ...       ...   \n",
       "2125                               Others  negative   \n",
       "2126                               Others  negative   \n",
       "2128                              Scandal  negative   \n",
       "2129                              Scandal  negative   \n",
       "2131  Women Reproductive right and Racism  negative   \n",
       "\n",
       "                                                decoded  \\\n",
       "0     @RosieBarton So instead of your suggestion, ho...   \n",
       "2     #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "4     #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "5     #CanadaVotes2019 #elxn43 #cdnpoli - FACTS - #B...   \n",
       "8     #chooseforward #cdnpoli #elxn43\\nCanada, Don't...   \n",
       "...                                                 ...   \n",
       "2125  You can’t be a supervillain of an election if ...   \n",
       "2126  You care about limiting #ClimateChange and are...   \n",
       "2128  You know he was doing a good enough job smeari...   \n",
       "2129  You missed the comment. Deflecting the issue d...   \n",
       "2131  Yup...not going to reopen the abortion debate....   \n",
       "\n",
       "                                        lower_case_text  \\\n",
       "0     @rosiebarton so instead of your suggestion, ho...   \n",
       "2     #brantford it's going to cost you $94 billion ...   \n",
       "4     #canada #taxpayers are sick &amp; tired of hav...   \n",
       "5     #canadavotes2019 #elxn43 #cdnpoli - facts - #b...   \n",
       "8     #chooseforward #cdnpoli #elxn43\\ncanada, don't...   \n",
       "...                                                 ...   \n",
       "2125  you can’t be a supervillain of an election if ...   \n",
       "2126  you care about limiting #climatechange and are...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "\n",
       "                          without any urls and hashtags  \\\n",
       "0       so instead of your suggestion, how about we ...   \n",
       "2      brantford it's going to cost you $94 billion ...   \n",
       "4      canada  taxpayers are sick &amp; tired of hav...   \n",
       "5      canadavotes2019  elxn43  cdnpoli - facts -  b...   \n",
       "8      chooseforward  cdnpoli  elxn43\\ncanada, don't...   \n",
       "...                                                 ...   \n",
       "2125  you can’t be a supervillain of an election if ...   \n",
       "2126  you care about limiting  climatechange and are...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment. deflecting the issue d...   \n",
       "2131  yup...not going to reopen the abortion debate....   \n",
       "\n",
       "                without any urls and hashtags and puncs  \\\n",
       "0      so instead of your suggestion how about we ag...   \n",
       "2      brantford it s going to cost you 94 billion f...   \n",
       "4      canada taxpayers are sick amp tired of having...   \n",
       "5      canadavotes2019 elxn43 cdnpoli facts blastfro...   \n",
       "8      chooseforward cdnpoli elxn43 canada don t mak...   \n",
       "...                                                 ...   \n",
       "2125  you can t be a supervillain of an election if ...   \n",
       "2126  you care about limiting climatechange and are ...   \n",
       "2128  you know he was doing a good enough job smeari...   \n",
       "2129  you missed the comment deflecting the issue do...   \n",
       "2131  yup not going to reopen the abortion debate el...   \n",
       "\n",
       "          without any urls,hashtags,puncs and stopwords  \\\n",
       "0     instead suggestion agree canadian women trust ...   \n",
       "2     brantford going cost 94 billion next 4 years a...   \n",
       "4     canada taxpayers sick amp tired hard earned do...   \n",
       "5     canadavotes2019 elxn43 cdnpoli facts blastfrom...   \n",
       "8     chooseforward cdnpoli elxn43 canada make ameri...   \n",
       "...                                                 ...   \n",
       "2125           supervillain election failed jobs elxn43   \n",
       "2126  care limiting climatechange wondering party vo...   \n",
       "2128  know good enough job smearing campaign right c...   \n",
       "2129  missed comment deflecting issue answer best re...   \n",
       "2131  yup going reopen abortion debate elxn43 scheer...   \n",
       "\n",
       "                                     NLTK  tokenization  \\\n",
       "0     [instead, suggestion, agree, canadian, women, ...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4     [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "5     [canadavotes2019, elxn43, cdnpoli, facts, blas...   \n",
       "8     [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "...                                                 ...   \n",
       "2125     [supervillain, election, failed, jobs, elxn43]   \n",
       "2126  [care, limiting, climatechange, wondering, par...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "\n",
       "                                                Stemmed  \\\n",
       "0     [instead, suggest, agre, canadian, women, trus...   \n",
       "2     [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "4     [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "5     [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8     [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "...                                                 ...   \n",
       "2125           [supervillain, elect, fail, job, elxn43]   \n",
       "2126  [care, limit, climatechang, wonder, parti, vot...   \n",
       "2128  [know, good, enough, job, smear, campaign, rig...   \n",
       "2129  [miss, comment, deflect, issu, answer, best, r...   \n",
       "2131  [yup, go, reopen, abort, debat, elxn43, scheer...   \n",
       "\n",
       "                                             Lemmatized  \\\n",
       "0     [instead, suggestion, agree, canadian, woman, ...   \n",
       "2     [brantford, going, cost, 94, billion, next, 4,...   \n",
       "4     [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "5     [canadavotes2019, elxn43, cdnpoli, fact, blast...   \n",
       "8     [chooseforward, cdnpoli, elxn43, canada, make,...   \n",
       "...                                                 ...   \n",
       "2125      [supervillain, election, failed, job, elxn43]   \n",
       "2126  [care, limiting, climatechange, wondering, par...   \n",
       "2128  [know, good, enough, job, smearing, campaign, ...   \n",
       "2129  [missed, comment, deflecting, issue, answer, b...   \n",
       "2131  [yup, going, reopen, abortion, debate, elxn43,...   \n",
       "\n",
       "                                   clean_text_elections  sentiment_value  \\\n",
       "0     instead suggestion agree canadian woman trust ...                0   \n",
       "2     brantford going cost 94 billion next 4 year as...                0   \n",
       "4     canada taxpayer sick amp tired hard earned don...                0   \n",
       "5     canadavotes2019 elxn43 cdnpoli fact blastfromt...                0   \n",
       "8     chooseforward cdnpoli elxn43 canada make ameri...                0   \n",
       "...                                                 ...              ...   \n",
       "2125            supervillain election failed job elxn43                0   \n",
       "2126  care limiting climatechange wondering party vo...                0   \n",
       "2128  know good enough job smearing campaign right c...                0   \n",
       "2129  missed comment deflecting issue answer best re...                0   \n",
       "2131  yup going reopen abortion debate elxn43 scheer...                0   \n",
       "\n",
       "     political parties  predicted_sentiment_value  \n",
       "0         Conservative                          0  \n",
       "2             liberals                          0  \n",
       "4             liberals                          0  \n",
       "5         Conservative                          0  \n",
       "8                 None                          0  \n",
       "...                ...                        ...  \n",
       "2125              None                          0  \n",
       "2126              None                          4  \n",
       "2128      Conservative                          4  \n",
       "2129      Conservative                          4  \n",
       "2131      Conservative                          0  \n",
       "\n",
       "[1006 rows x 14 columns]"
      ]
     },
     "execution_count": 831,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### neg_tweets1 has all the columns plus the grouped_negative_reasons columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### model preparation using tfidf vectorizer for predicting the negative reason"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 832,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 833,
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf_neg = tfidf_vectorizer.fit_transform(neg_tweets1['clean_text_elections'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 834,
   "metadata": {},
   "outputs": [],
   "source": [
    "x3 = tfidf_neg\n",
    "y3 = neg_tweets1['predicted_negative_reason']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 835,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_train2,text_test2,class_train2,class_test2 = train_test_split(x3,y3,test_size = 0.3, random_state =101)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (1) Logistic regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 836,
   "metadata": {},
   "outputs": [],
   "source": [
    "logmodel3 = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 837,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='warn', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 837,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "logmodel3.fit(text_train2,class_train2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 838,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred3 = logmodel3.predict(text_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 839,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using logistic regression for prediction of negative reason: 64.90066225165563 %\n"
     ]
    }
   ],
   "source": [
    "ACC3 = accuracy_score(pred3,class_test2)\n",
    "\n",
    "print('Accuracy using logistic regression for prediction of negative reason:', ACC3*100,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 840,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                     precision    recall  f1-score   support\n",
      "\n",
      "                         Healthcare       0.00      0.00      0.00         0\n",
      "                             Others       0.71      0.60      0.65       148\n",
      "                            Scandal       0.68      0.70      0.69       152\n",
      "Women Reproductive right and Racism       0.06      0.50      0.11         2\n",
      "\n",
      "                           accuracy                           0.65       302\n",
      "                          macro avg       0.36      0.45      0.36       302\n",
      "                       weighted avg       0.69      0.65      0.67       302\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(pred3,class_test2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 841,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  0,   0,   0,   0],\n",
       "       [  2,  89,  49,   8],\n",
       "       [  1,  37, 106,   8],\n",
       "       [  0,   0,   1,   1]], dtype=int64)"
      ]
     },
     "execution_count": 841,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(pred3,class_test2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (2) Naive bayes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 842,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MultinomialNB(alpha=1.0, class_prior=None, fit_prior=True)"
      ]
     },
     "execution_count": 842,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NB3 = MultinomialNB()\n",
    "\n",
    "NB3.fit(text_train2,class_train2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 843,
   "metadata": {},
   "outputs": [],
   "source": [
    "predNB3 = NB3.predict(text_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 844,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using Naive bayes for prediction of negative reason: 64.56953642384106 %\n"
     ]
    }
   ],
   "source": [
    "ACCNB3 = accuracy_score(predNB3,class_test2)\n",
    "\n",
    "print('Accuracy using Naive bayes for prediction of negative reason:', ACCNB3*100,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 845,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                     precision    recall  f1-score   support\n",
      "\n",
      "                         Healthcare       0.00      0.00      0.00         0\n",
      "                             Others       0.69      0.60      0.64       144\n",
      "                            Scandal       0.69      0.68      0.69       158\n",
      "Women Reproductive right and Racism       0.00      0.00      0.00         0\n",
      "\n",
      "                           accuracy                           0.65       302\n",
      "                          macro avg       0.35      0.32      0.33       302\n",
      "                       weighted avg       0.69      0.65      0.67       302\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(predNB3,class_test2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 846,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  0   0   0   0]\n",
      " [  2  87  48   7]\n",
      " [  1  39 108  10]\n",
      " [  0   0   0   0]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(predNB3,class_test2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### (3) Support Vector Machines"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 847,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.svm import LinearSVC"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 848,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf3 = LinearSVC(random_state=0, tol=1e-5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 849,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearSVC(C=1.0, class_weight=None, dual=True, fit_intercept=True,\n",
       "          intercept_scaling=1, loss='squared_hinge', max_iter=1000,\n",
       "          multi_class='ovr', penalty='l2', random_state=0, tol=1e-05,\n",
       "          verbose=0)"
      ]
     },
     "execution_count": 849,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "clf3.fit(text_train2,class_train2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 850,
   "metadata": {},
   "outputs": [],
   "source": [
    "clfpred3 = clf3.predict(text_test2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 851,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy using support vector machines for prediction of negative reasons: 66.55629139072848 %\n"
     ]
    }
   ],
   "source": [
    "clfACC3 = accuracy_score(clfpred3,class_test2)\n",
    "\n",
    "print('Accuracy using support vector machines for prediction of negative reasons:', clfACC3*100,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 852,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                                     precision    recall  f1-score   support\n",
      "\n",
      "                         Healthcare       0.00      0.00      0.00         0\n",
      "                             Others       0.71      0.61      0.66       145\n",
      "                            Scandal       0.69      0.71      0.70       150\n",
      "Women Reproductive right and Racism       0.29      0.71      0.42         7\n",
      "\n",
      "                           accuracy                           0.67       302\n",
      "                          macro avg       0.42      0.51      0.44       302\n",
      "                       weighted avg       0.69      0.67      0.67       302\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(clfpred3,class_test2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 853,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[  0   0   0   0]\n",
      " [  1  89  48   7]\n",
      " [  2  36 107   5]\n",
      " [  0   1   1   5]]\n"
     ]
    }
   ],
   "source": [
    "print(confusion_matrix(clfpred3,class_test2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### It can be seen that the accuracy for predicting the negative reasons is the highest when support vector machines was used. The accuracy value is 66.55629139072848 %"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## RESULTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## What can public opinion on Twitter tell us about the Canadian political landscape in 2019?”"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 854,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>negative_reason</th>\n",
       "      <th>sentiment</th>\n",
       "      <th>decoded</th>\n",
       "      <th>lower_case_text</th>\n",
       "      <th>without any urls and hashtags</th>\n",
       "      <th>without any urls and hashtags and puncs</th>\n",
       "      <th>without any urls,hashtags,puncs and stopwords</th>\n",
       "      <th>NLTK  tokenization</th>\n",
       "      <th>Stemmed</th>\n",
       "      <th>Lemmatized</th>\n",
       "      <th>clean_text_elections</th>\n",
       "      <th>sentiment_value</th>\n",
       "      <th>political parties</th>\n",
       "      <th>predicted_sentiment_value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Women Reproductive right and Racism</td>\n",
       "      <td>negative</td>\n",
       "      <td>@RosieBarton So instead of your suggestion, ho...</td>\n",
       "      <td>@rosiebarton so instead of your suggestion, ho...</td>\n",
       "      <td>so instead of your suggestion, how about we ...</td>\n",
       "      <td>so instead of your suggestion how about we ag...</td>\n",
       "      <td>instead suggestion agree canadian women trust ...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, women, ...</td>\n",
       "      <td>[instead, suggest, agre, canadian, women, trus...</td>\n",
       "      <td>[instead, suggestion, agree, canadian, woman, ...</td>\n",
       "      <td>instead suggestion agree canadian woman trust ...</td>\n",
       "      <td>0</td>\n",
       "      <td>Conservative</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#AllWomanSpacewalk it's real!\\n@Space_Station ...</td>\n",
       "      <td>#allwomanspacewalk it's real!\\n@space_station ...</td>\n",
       "      <td>allwomanspacewalk it's real!\\n  \\n etobicoken...</td>\n",
       "      <td>allwomanspacewalk it s real etobicokenorth ci...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>[allwomanspacewalk, real, etobicokenorth, city...</td>\n",
       "      <td>allwomanspacewalk real etobicokenorth cityofto...</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Brantford It's going to cost YOU $94 BILLION ...</td>\n",
       "      <td>#brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it's going to cost you $94 billion ...</td>\n",
       "      <td>brantford it s going to cost you 94 billion f...</td>\n",
       "      <td>brantford going cost 94 billion next 4 years a...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>[brantford, go, cost, 94, billion, next, 4, ye...</td>\n",
       "      <td>[brantford, going, cost, 94, billion, next, 4,...</td>\n",
       "      <td>brantford going cost 94 billion next 4 year as...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>positive</td>\n",
       "      <td>#Canada #CanadaElection2019 #CanadaVotes \\n#el...</td>\n",
       "      <td>#canada #canadaelection2019 #canadavotes \\n#el...</td>\n",
       "      <td>canada  canadaelection2019  canadavotes \\n el...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 ...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>[canada, canadaelection2019, canadavot, elxn43...</td>\n",
       "      <td>[canada, canadaelection2019, canadavotes, elxn...</td>\n",
       "      <td>canada canadaelection2019 canadavotes elxn43 d...</td>\n",
       "      <td>4</td>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Economy</td>\n",
       "      <td>negative</td>\n",
       "      <td>#Canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>#canada #taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada  taxpayers are sick &amp;amp; tired of hav...</td>\n",
       "      <td>canada taxpayers are sick amp tired of having...</td>\n",
       "      <td>canada taxpayers sick amp tired hard earned do...</td>\n",
       "      <td>[canada, taxpayers, sick, amp, tired, hard, ea...</td>\n",
       "      <td>[canada, taxpay, sick, amp, tire, hard, earn, ...</td>\n",
       "      <td>[canada, taxpayer, sick, amp, tired, hard, ear...</td>\n",
       "      <td>canada taxpayer sick amp tired hard earned don...</td>\n",
       "      <td>0</td>\n",
       "      <td>liberals</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       negative_reason sentiment  \\\n",
       "0  Women Reproductive right and Racism  negative   \n",
       "1                                  NaN  positive   \n",
       "2                              Economy  negative   \n",
       "3                                  NaN  positive   \n",
       "4                              Economy  negative   \n",
       "\n",
       "                                             decoded  \\\n",
       "0  @RosieBarton So instead of your suggestion, ho...   \n",
       "1  #AllWomanSpacewalk it's real!\\n@Space_Station ...   \n",
       "2  #Brantford It's going to cost YOU $94 BILLION ...   \n",
       "3  #Canada #CanadaElection2019 #CanadaVotes \\n#el...   \n",
       "4  #Canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                                     lower_case_text  \\\n",
       "0  @rosiebarton so instead of your suggestion, ho...   \n",
       "1  #allwomanspacewalk it's real!\\n@space_station ...   \n",
       "2  #brantford it's going to cost you $94 billion ...   \n",
       "3  #canada #canadaelection2019 #canadavotes \\n#el...   \n",
       "4  #canada #taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "                       without any urls and hashtags  \\\n",
       "0    so instead of your suggestion, how about we ...   \n",
       "1   allwomanspacewalk it's real!\\n  \\n etobicoken...   \n",
       "2   brantford it's going to cost you $94 billion ...   \n",
       "3   canada  canadaelection2019  canadavotes \\n el...   \n",
       "4   canada  taxpayers are sick &amp; tired of hav...   \n",
       "\n",
       "             without any urls and hashtags and puncs  \\\n",
       "0   so instead of your suggestion how about we ag...   \n",
       "1   allwomanspacewalk it s real etobicokenorth ci...   \n",
       "2   brantford it s going to cost you 94 billion f...   \n",
       "3   canada canadaelection2019 canadavotes elxn43 ...   \n",
       "4   canada taxpayers are sick amp tired of having...   \n",
       "\n",
       "       without any urls,hashtags,puncs and stopwords  \\\n",
       "0  instead suggestion agree canadian women trust ...   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...   \n",
       "2  brantford going cost 94 billion next 4 years a...   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...   \n",
       "4  canada taxpayers sick amp tired hard earned do...   \n",
       "\n",
       "                                  NLTK  tokenization  \\\n",
       "0  [instead, suggestion, agree, canadian, women, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayers, sick, amp, tired, hard, ea...   \n",
       "\n",
       "                                             Stemmed  \\\n",
       "0  [instead, suggest, agre, canadian, women, trus...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, go, cost, 94, billion, next, 4, ye...   \n",
       "3  [canada, canadaelection2019, canadavot, elxn43...   \n",
       "4  [canada, taxpay, sick, amp, tire, hard, earn, ...   \n",
       "\n",
       "                                          Lemmatized  \\\n",
       "0  [instead, suggestion, agree, canadian, woman, ...   \n",
       "1  [allwomanspacewalk, real, etobicokenorth, city...   \n",
       "2  [brantford, going, cost, 94, billion, next, 4,...   \n",
       "3  [canada, canadaelection2019, canadavotes, elxn...   \n",
       "4  [canada, taxpayer, sick, amp, tired, hard, ear...   \n",
       "\n",
       "                                clean_text_elections  sentiment_value  \\\n",
       "0  instead suggestion agree canadian woman trust ...                0   \n",
       "1  allwomanspacewalk real etobicokenorth cityofto...                4   \n",
       "2  brantford going cost 94 billion next 4 year as...                0   \n",
       "3  canada canadaelection2019 canadavotes elxn43 d...                4   \n",
       "4  canada taxpayer sick amp tired hard earned don...                0   \n",
       "\n",
       "  political parties  predicted_sentiment_value  \n",
       "0      Conservative                          0  \n",
       "1              None                          4  \n",
       "2          liberals                          0  \n",
       "3              None                          0  \n",
       "4          liberals                          0  "
      ]
     },
     "execution_count": 854,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "election_pp.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 855,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Sentiments')"
      ]
     },
     "execution_count": 855,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax1 = pd.crosstab(election_pp['political parties'],election_pp['predicted_sentiment_value']).plot(kind='bar',figsize=(10,6),color=['black','red'],width=0.75,)\n",
    "ax1.set_title(\"Total sentiments\",fontsize=20)\n",
    "ax1.set_xlabel(\"Political Parties\",fontsize=18)\n",
    "ax1.set_ylabel(\"Sentiments\",fontsize=18) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### The output of the first model was found with logistic regression using Tfidf Vectorizer. The predicted sentimental values are plotted above. \n",
    "\n",
    "### From the above graphs under public's perspective, the canadian politics is mostly negative as there are more bad or negative statements about all the parties. The twitter statements are mostly non biased because most of the tweets are not about a particular party.\n",
    "\n",
    "### Observing only the three parties from the above bar graph. It can be seen that from the predicted results, all the parties have negative sentiments than positive sentiments. \n",
    "\n",
    "### Even though the Conservative party has more negative sentiments; they have more positive sentiments than the other two parties. so from the predicted sentiment values, conservative party has a better election outcome than liberals and NDP."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Based on the second model,  It can be seen that the accuracy for predicting the negative reasons is the highest when support vector machines was used. The accuracy value is 66.55629139072848 %"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Some of the reasons predicted by the model do not match with the correct negative reason. This can be because tfidf vectorizer treats words on the order of importance with respect to the entire corpus. From the example below the actual prediction is 'others'  but it is wrongly predicted as 'Women Reproductive right and Racism' as the words like women , abortion are likey to be misinterpreted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 856,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'instead suggestion agree canadian woman trust andrewscheer conservative government protect woman right automony body let go cdnpoli elxn43 canada abortion'"
      ]
     },
     "execution_count": 856,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "neg_tweets1['clean_text_elections'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 857,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Others'"
      ]
     },
     "execution_count": 857,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clfpred3[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 858,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Women Reproductive right and Racism'"
      ]
     },
     "execution_count": 858,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class_test2[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  For both the models, the accuracy can be increased by removing or reducing missing values or if the texts are much more clearer. Hyperparameter tuning can be used and is also used in this project to increase the accuracy. Use deep learning algorithms as they give more insight of the text data. Feature selection can be done to increase the accuracy "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some extra plotting is done below to better visualisation and interpretation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Seperating each party rows as a individual data frame and observing the actual sentiment value to predicted sentiment value using piecharts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 859,
   "metadata": {},
   "outputs": [],
   "source": [
    "liberal = election_pp[election_pp['political parties'] == 'liberals']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 860,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data1 = liberal['predicted_sentiment_value'].value_counts()\n",
    "data2 =  liberal['sentiment_value'].value_counts()\n",
    "\n",
    "labels = 'negative', 'positive'\n",
    "\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2)\n",
    "ax1.pie(data1, labels=labels)\n",
    "ax1.set_title('Predicted sentiment value')\n",
    "ax2.pie(data2, labels=labels)\n",
    "ax2.set_title('Actual sentiment value')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now plotting for conservative party\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 861,
   "metadata": {},
   "outputs": [],
   "source": [
    "Conservative = election_pp[election_pp['political parties'] == 'Conservative']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 862,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data3 = Conservative['predicted_sentiment_value'].value_counts()\n",
    "data4 = Conservative['sentiment_value'].value_counts()\n",
    "\n",
    "labels = 'negative', 'positive'\n",
    "fig, (ax3, ax4) = plt.subplots(1, 2)\n",
    "ax3.pie(data3, labels=labels)\n",
    "ax3.set_title('Predicted sentiment value')\n",
    "ax4.pie(data4, labels=labels)\n",
    "ax4.set_title('Actual sentiment value')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Now plotting for NDP party"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 863,
   "metadata": {},
   "outputs": [],
   "source": [
    "NDP = election_pp[election_pp['political parties'] == 'NDP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 864,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data5 = NDP['predicted_sentiment_value'].value_counts()\n",
    "data6 =  NDP['sentiment_value'].value_counts()\n",
    "\n",
    "labels = 'negative', 'positive'\n",
    "\n",
    "fig, (ax5, ax6) = plt.subplots(1, 2)\n",
    "ax5.pie(data5, labels=labels)\n",
    "ax5.set_title('Predicted sentiment value')\n",
    "ax6.pie(data6, labels=labels)\n",
    "ax6.set_title('Actual sentiment value')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "-"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now visualising the postive to negative sentiment ratio for each of the party by bar graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 865,
   "metadata": {},
   "outputs": [],
   "source": [
    "ax3=pd.crosstab(election_pp['political parties'],election_pp['predicted_sentiment_value'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 866,
   "metadata": {},
   "outputs": [],
   "source": [
    "ax3['total']=ax3[0]+ax3[4]\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 867,
   "metadata": {},
   "outputs": [],
   "source": [
    "ax3['pos_to_neg_ratio']=ax3[4]/ax3[0]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 868,
   "metadata": {},
   "outputs": [],
   "source": [
    "political_party = ['Mixed','liberals','conservative','NDP','none']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 869,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 0, 'Political parties')"
      ]
     },
     "execution_count": 869,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.bar(political_party,ax3['pos_to_neg_ratio'])\n",
    "plt.rcParams['figure.figsize']=(10,6)\n",
    "plt.title(\"parties with their postive to negative sentiment ratio\",fontsize=18)\n",
    "plt.ylabel(\"Positive to Negative Sentiment Ratio\",fontsize=16)\n",
    "plt.xlabel(\"Political parties\",fontsize=16)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
